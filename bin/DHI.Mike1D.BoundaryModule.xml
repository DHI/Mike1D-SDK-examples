<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DHI.Mike1D.BoundaryModule</name>
    </assembly>
    <members>
        <member name="T:DHI.Mike1D.BoundaryModule.BoundaryAdaptiveTimeSeriesEvaluator">
            <summary>
            Helper class to calculate preferred time step based on a
            list of times and a list of values.
            <para>
            This class is intended for cases where only one value serie
            use this time axis.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryAdaptiveTimeSeriesEvaluator.#ctor(System.Collections.Generic.IReadOnlyList{System.DateTime},System.Collections.Generic.IReadOnlyList{System.Double})">
            <summary>
            Constructor
            </summary>
            <param name="times">Times</param>
            <param name="values">Values</param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryAdaptiveTimeSeriesEvaluator.GetPreferredTimeStep(System.DateTime,System.TimeSpan,System.TimeSpan,System.Double,System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.BoundaryAdaptiveTimeValueSeriesEvaluator">
            <summary>
            Helper class to calculate preferred time step based on a
            list of times and a list of values.
            <para>
            This class is intended for cases where more than one value series
            share the same time axis.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryAdaptiveTimeValueSeriesEvaluator.#ctor(DHI.Mike1D.BoundaryModule.BoundaryAdaptiveTimeEvaluator,System.Collections.Generic.IReadOnlyList{System.Double})">
            <summary>
            Constructor
            </summary>
            <param name="times">Time evaluator, shared by multiple instances of this class</param>
            <param name="values">Values</param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryAdaptiveTimeValueSeriesEvaluator.GetPreferredTimeStep(System.DateTime,System.TimeSpan,System.TimeSpan,System.Double,System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.BoundaryAdaptiveTimeEvaluator">
            <summary>
            Helper class to calculate preferred time step based on a
            list of times and a list of values. This class holds the time
            data only, and can be reused if more value series share the same time axis.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryAdaptiveTimeEvaluator.#ctor(System.Collections.Generic.IReadOnlyList{System.DateTime})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryAdaptiveTimeEvaluator.GetIntervalVariation(System.DateTime,System.DateTime,System.Int32@,System.Double@,System.Int32@,System.Double@)">
            <summary>
            Get interval and fraction of start and end. 
            Returns boolean indicating if variation is possible, 
            i.e. false if start and end is in same interval, true
            if interval is different 
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryAdaptiveTimeEvaluator.GetPreferredTimeStep(System.Collections.Generic.IReadOnlyList{System.Double},System.DateTime,System.TimeSpan,System.TimeSpan,System.Double,System.Double,System.Double)">
            <summary>
            Get preferred time step, where values should not vary more than
            <paramref name="maxRelChange"/> within the given time step.
            <para>
            Variation is measured as the difference from any value to
            the linearly interpolated value from <code>start</code> to <code>start + curDt</code>.
            </para>
            <para>
            this method returns the preferred time step where variation is at most <paramref name="maxRelChange"/>.
            </para>
            </summary>
            <param name="values">Values</param>
            <param name="start">Start time of time step</param>
            <param name="minDt">Smallest time step allowed</param>
            <param name="curDt">Current time step size</param>
            <param name="maxRelChange">Maximum relative change</param>
            <param name="cutoff">Cutoff value, for values below this value, the variation is not checked for</param>
            <param name="referenceValue">Reference value, used by e.g. water level boundaries (usually bottom level)</param>
            <returns>Preferred time step, a value between <paramref name="minDt"/> and <paramref name="curDt"/></returns>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.BoundaryAdaptiveProbeWrapper">
            <summary>
            A helper class for implementing the <see cref="T:DHI.Mike1D.BoundaryModule.IBoundaryAdaptive"/> interface
            for a <see cref="T:DHI.Mike1D.BoundaryModule.IBoundarySource"/> by probing the values.
            <para>
            Probing will not find all extreme values, and hence it is more accurate to
            implement the <see cref="T:DHI.Mike1D.BoundaryModule.IBoundaryAdaptive"/> directly and use knowledge of the
            boundary data, instead of being based on probing.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryAdaptiveProbeWrapper.#ctor(DHI.Mike1D.BoundaryModule.IBoundarySource)">
            <summary>
            Default constructor with <paramref name="boundary"/> to wrap.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryAdaptiveProbeWrapper.GetPreferredTimeStep(System.DateTime,System.TimeSpan,System.TimeSpan,System.Double,System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.BoundaryData">
            <summary>
            The BoundaryData class is the main entrance to boundary data access.
            It handles boundary conditions and sources.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryData.TsBuffer">
            <summary>
            A buffer containing all timeseries, so they can be reused as much as possible.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.BoundaryData._openSourceBoundaries">
            <summary>
            List of all boundaries of different type
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryData.OpenSourceBoundaries">
            <summary>
            Get a list of all open source boundaries
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryData.PointSourceBoundaries">
            <summary>
            Get a list of all point source boundaries
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryData.DistributedSourceBoundaries">
            <summary>
            Get a list of all distributed source boundaries
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryData.GlobalSourceBoundaries">
            <summary>
            Get a list of all global source boundaries
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryData.CatchmentSourceBoundaries">
            <inheritdoc />
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryData.CatchmentComponentSourceBoundaries">
            <summary>
            Catchment component source boundaries are AD component boundaries that
            are handled by the catchment (by a catchment plugin).
            The catchment calculates an AD load/concentration
            which can be outputted and added to the network.
            <para>
            These boundaries will not be applied to runoff from a catchment result file (<see cref="P:DHI.Mike1D.BoundaryModule.BoundaryData.CatchmentResultFiles"/>).
            Concentrations for those must be specified in <see cref="P:DHI.Mike1D.BoundaryModule.CatchmentResultFile.Components"/>, or
            <see cref="P:DHI.Mike1D.BoundaryModule.CatchmentResultFile.ComponentResultFiles"/>.
            </para>
            <para>
            The net-rainfall catchment quantity version is special. This requires also HD,
            because only at that point in time it is known exactly how much rain that falls on the river surface.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryData.CatchmentResultFiles">
            <summary>
            List of catchment result files, containing rainfall runoff and/or catchment discharge.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryData.StructureSourceBoundaries">
            <summary>
            Get a list of all catchment source boundaries
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryData.#ctor">
            <summary>
            Creates an empty BoundaryData component.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryData.Initialize">
            <summary>
            Default Initialize function, call in all constructors.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryData.GetOpenSourceBoundariesForType(DHI.Mike1D.BoundaryModule.OpenSourceBoundaryTypes)">
            <summary>
            Engine functionality.
            Get <see cref="T:DHI.Mike1D.BoundaryModule.IOpenSourceBoundary"/> list for all <see cref="T:DHI.Mike1D.BoundaryModule.IOpenSourceBoundary"/>'s of a given 
            <see cref="T:DHI.Mike1D.BoundaryModule.OpenSourceBoundaryTypes"/>.
            </summary>
            <param name="type">The boundary type to get</param>
            <returns>A list of <see cref="T:DHI.Mike1D.BoundaryModule.IOpenSourceBoundary"/>'s</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryData.GetDistributedSourceBoundariesForType(DHI.Mike1D.BoundaryModule.DistributedSourceBoundaryTypes)">
            <summary>
            Engine functionality.
            Get <see cref="T:DHI.Mike1D.BoundaryModule.IDistributedSourceBoundary"/> list for all <see cref="T:DHI.Mike1D.BoundaryModule.IDistributedSourceBoundary"/>'s of a given 
            <see cref="T:DHI.Mike1D.BoundaryModule.DistributedSourceBoundaryTypes"/>
            </summary>
            <param name="type">The boundary type to get</param>
            <returns>A list of <see cref="T:DHI.Mike1D.BoundaryModule.IDistributedSourceBoundary"/>'s</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryData.Prepare(System.DateTime,System.DateTime,DHI.Mike1D.Generic.IDiagnostics)">
            <summary>
            Prepare the object for a simulation
            </summary>
            <param name="simStart">Start time of simulation</param>
            <param name="simEnd">End time of simulation</param>
            <param name="diagnostics">Diagnostics object that issues are reported to</param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryData.PrepareComponents(System.Collections.Generic.IDictionary{System.String,DHI.Generic.MikeZero.eumQuantity})">
            <summary>
            Prepare the object for AD/ST integration, setting output unit from boundary system for all components
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryData.Validate(System.DateTime,System.DateTime)">
            <summary>
            Validates the object
            </summary>
            <returns>An IDiagnostics containing errors, warning, and hints</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryData.Save">
            <summary>
            Save the data to the file defined by the Connection
            
            File will be overwritten if existing.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryData.Append(DHI.Mike1D.Generic.IConnection)">
            <summary>
            Append data from another file defined by its connection
            to the current Boundary data object
            </summary>
            <param name="connection">Connection info for new file</param>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryData.ExtensionData">
            <summary>
            Data from an extended DataContract not recognized here
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryData.RuntimeDiagnostics">
            <summary>
            Runtime diagnostics object.
            <para>
            Issues during runtime are reported to this object.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryData.GetGlobalSource(DHI.Mike1D.BoundaryModule.GlobalSourceBoundaryTypes)">
            <summary>
            Gets the GlobalSourceBoundary that handles the <paramref name="globalSourceBoundaryType"/>.
            Null if not existing in the list.
            </summary>
            <param name="globalSourceBoundaryType">Global source boundary type to get</param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryData.GetOrCreateGlobalSource(DHI.Mike1D.BoundaryModule.GlobalSourceBoundaryTypes)">
            <summary>
            Gets the GlobalSourceBoundary that handles the <paramref name="globalSourceBoundaryType"/>.
            Null if not existing in the list.
            </summary>
            <param name="globalSourceBoundaryType">Global source boundary type to get</param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryData.GetOrCreateGlobalSource(DHI.Mike1D.BoundaryModule.GlobalSourceBoundaryTypes,DHI.Mike1D.BoundaryModule.GlobalSourceApplicationTypes)">
            <summary>
            Gets the GlobalSourceBoundary that handles the <paramref name="globalSourceBoundaryType"/>.
            Null if not existing in the list.
            </summary>
            <param name="globalSourceBoundaryType">Global source boundary type to get</param>
            <param name="applicationType">When created, set this application type</param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryData.CreateRuntimeDiagnostics">
            <summary>
            Create runtime diagnostics object
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryData.TotalNumberOfInflowBoundaries">
            <summary>
            Returns the total number of inflow and QH boundaries
            </summary>
            <returns></returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryData.ShareTsBuffer">
            <summary>
            Share TS buffer to all time series boundary items that is connected
            to any boundary source in the boundary data object.
            <para>
            Only boundary sources deriving from <see cref="T:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary"/>
            will be considered, since that contains the only known list of boundary items.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryData.ShareTsBuffer(DHI.Mike1D.BoundaryModule.IBoundarySource)">
            <summary>
            Share TS buffer to all time series boundary items in list
            of items and components of boundary source.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryData.ShareTsBuffer(System.Collections.Generic.IEnumerable{DHI.Mike1D.BoundaryModule.IBoundaryItem})">
            <summary>
            Share TS buffer to all time series boundary items in the list
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.BoundaryExtensions">
            <summary>
            Utility class, containing extension methods for classes
            in the BoundaryModule namespace
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryExtensions.IsCatchmentDischargeType(DHI.Mike1D.BoundaryModule.CatchmentSourceBoundaryTypes)">
            <summary>
            Returns true if the catchment source type is a catchment discharge type
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryExtensions.IsCatchmentDischargeType(DHI.Mike1D.BoundaryModule.GlobalSourceBoundaryTypes)">
            <summary>
            Returns true if the catchment source type is a catchment discharge type
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryExtensions.HasGlobalType(DHI.Mike1D.BoundaryModule.CatchmentSourceBoundaryTypes)">
            <summary>
            Check if catchment boundary type has a matching global boundary type.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryExtensions.ToGlobalType(DHI.Mike1D.BoundaryModule.CatchmentSourceBoundaryTypes)">
            <summary>
            Convert a catchment boundary type to a global boundary type. If there is no corresponding global type,
            an exception is thrown.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryExtensions.HasCatchmentType(DHI.Mike1D.BoundaryModule.GlobalSourceBoundaryTypes)">
            <summary>
            Check if global boundary type has a matching catchment boundary type.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryExtensions.ToCatchmentType(DHI.Mike1D.BoundaryModule.GlobalSourceBoundaryTypes)">
            <summary>
            Convert a global boundary type to a catchment boundary type.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryExtensions.DistributionType(DHI.Mike1D.BoundaryModule.IGlobalSourceBoundary)">
            <summary>
            Type of distribution on reaches for the global boundary type
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryExtensions.Rescale(DHI.Mike1D.BoundaryModule.GriddedSource)">
            <summary>
            Rescale weights for all catchments that has weights defined.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryExtensions.HasWeights(DHI.Mike1D.BoundaryModule.CatchmentGriddedWeights)">
            <summary>
            Returns true if weights are defined for this catchment.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryExtensions.FindTimeNextValue(DHI.Mike1D.BoundaryModule.IBoundarySource,System.DateTime,System.DateTime)">
            <summary>
            Findes the time where the boundary source has a value that is non-zero. The
            time interval is within the provided limits.
            </summary>
            <param name="source">Source to search for values in</param>
            <param name="startTime">Time where to start searching</param>
            <param name="endTime">End time, where search will end.</param>
            <returns>Time where boundary source has the next nonzero value, or endTime if not found</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryExtensions.FindOpenSourceBoundary(DHI.Mike1D.BoundaryModule.IBoundaryData,DHI.Mike1D.Generic.ILocation)">
            <summary>
            Find open source boundary for the <paramref name="location"/>. Returns the first one found (i.e. does not
            check if there is more than one).
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryExtensions.FindOpenSourceBoundaries(DHI.Mike1D.BoundaryModule.IBoundaryData,DHI.Mike1D.Generic.ILocation)">
            <summary>
            Find open source boundaries for the <paramref name="location"/>.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryExtensions.RemoveOpenSourceBoundary(DHI.Mike1D.BoundaryModule.IBoundaryData,DHI.Mike1D.Generic.ILocation)">
            <summary>
            Remove boundary at location. If boundary is used in more than one location,
            only the location is removed from the boundary, otherwise the entire boundary
            is removed.
            </summary>
            <param name="bndData">Boundary data object</param>
            <param name="location">Location to remove</param>
            <returns>True if boundary found and removed at location.</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryExtensions.GetBoundaryPreferredTimeStep(DHI.Mike1D.BoundaryModule.IBoundarySource,System.DateTime,System.TimeSpan,System.TimeSpan,System.Double,System.Double,System.Double)">
            <summary>
            For a generic boundary, estimate the preferred time step, based in some tolerances for how much the 
            boundary can change within a time step.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryExtensions.IsLoad(DHI.Mike1D.BoundaryModule.BoundarySourceComponent)">
            <summary>
            Check if boundary source component is a load
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.BoundaryItemConstant">
            <summary>
            Constant boundary item implementation.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.BoundaryItemConstant._constValue">
            <summary>
            The actual constant value.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemConstant.ConstValue">
            <summary>
            Setter access for the constant value. Use GetValue to retrieve it.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemConstant.EumQuantity">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemConstant.create(System.Double)">
            <summary>
            BoundaryItemConstant factory, creates and returns a new
            object.
            </summary>
            <param name="constValue">The initial constant value.</param>
            <returns>A fully initialized BoundaryItemConstant object.</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemConstant.ToString">
            <summary>
            Custom textual representation
            </summary>
            <returns>Custom textual representation</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemConstant.GetValue(System.DateTime)">
            <summary>
            Get value for this source
            </summary>
            <param name="date">DateTime to get value</param>
            <returns>Value</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemConstant.GetAccumulatedValue(System.DateTime,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemConstant.Validate">
            <summary>
            Validate this
            </summary>
            <returns>IDiagnostics with issues</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemConstant.GetNextTransitionTime(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemConstant.GetPreferredTimeStep(System.DateTime,System.TimeSpan,System.TimeSpan,System.Double,System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemConstant.ExtensionData">
            <summary>
            Data from an extended DataContract not recognized here
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.BoundaryItemDDoubleGetter">
            <summary>
            A boundary item that retrieves its value through a delegate
            of the type DDoubleTimeGetter. Inherits <see cref="T:DHI.Mike1D.BoundaryModule.AbstractBoundaryItem"/>
            supporting scalefactor, application interval and soft start.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemDDoubleGetter.#ctor">
            <summary>
            Default constructor (for COM interop)
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemDDoubleGetter.#ctor(System.Func{System.DateTime,System.Double})">
            <summary>
            Constructor initialized with the delegate.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemDDoubleGetter.Getter">
            <summary>
            The delegate used to extract the value for the item
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemDDoubleGetter.EumQuantity">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemDDoubleGetter.GetValue(System.DateTime)">
            <summary>
            Get boundary value at specified date/time.
            
            It is the callers responsibility to check if the
            item is applicable at the given datetime before
            calling GetValue.
            </summary>
            <param name="dateTime">DateTime to get value</param>
            <returns>Boundary value in</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemDDoubleGetter.GetAccumulatedValue(System.DateTime,System.DateTime)">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemDDoubleGetter.Validate">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.BoundaryItemHDADMultiply">
            <summary>
            A boundary item consisting of two boundary items that
            are multiplied together
            <para>
            This boundary item is used by MIKE 11 load, setup 
            as HD inflow + AD concentration, where the HD
            inflow is ignored, but the AD is included, effectively
            modelling a load type of AD boundary.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemHDADMultiply.HDItem">
            <summary>
            HD item
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemHDADMultiply.ADItem">
            <summary>
            AD item, must be concentration item
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemHDADMultiply.EumQuantity">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemHDADMultiply.GetValue(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemHDADMultiply.GetAccumulatedValue(System.DateTime,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemHDADMultiply.IsDryWeatherFlow">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemHDADMultiply.IsApplicable(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemHDADMultiply.IsApplicable(System.DateTime,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemHDADMultiply.Validate">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemHDADMultiply.Prepare(System.DateTime,System.DateTime,DHI.Mike1D.Generic.IDiagnostics)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemHDADMultiply.GetNextTransitionTime(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.BoundaryItemPeriodicMonthly">
            <summary>
            A boundary item with constant values in each month
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemPeriodicMonthly.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemPeriodicMonthly.#ctor(System.Collections.Generic.IList{System.Double})">
            <summary>
            Constructor, setting up monthly values.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemPeriodicMonthly.ScaleFactor">
            <summary>
            Global scale factor with which the values are scaled.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemPeriodicMonthly.MonthlyValues">
            <summary>
            Monthly values, constant within each month.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemPeriodicMonthly.EumQuantity">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemPeriodicMonthly.GetValue(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemPeriodicMonthly.GetAccumulatedValue(System.DateTime,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemPeriodicMonthly.IsApplicable(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemPeriodicMonthly.IsApplicable(System.DateTime,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemPeriodicMonthly.Validate">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemPeriodicMonthly.Prepare(System.DateTime,System.DateTime,DHI.Mike1D.Generic.IDiagnostics)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemPeriodicMonthly.GetNextTransitionTime(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemPeriodicMonthly.IsDryWeatherFlow">
            <inheritdoc />
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemPeriodicMonthly.ExtensionData">
            <inheritdoc />
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.BoundaryItemRRResult">
            <summary>
            Rainfall runoff boundary item.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemRRResult.FilePath">
            <summary>
            Path to rainfall runoff result file (usually *RR.res1d)
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemRRResult.CatchmentId">
            <summary>
            ID of catchment from RR result file to retrieve data from
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemRRResult.QuantityId">
            <summary>
            Quantity of catchment from RR result file to retrieve data from
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemRRResult.EumQuantity">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemRRResult.Create(DHI.Mike1D.Generic.IFilePath,System.String,System.String)">
            <summary>
            Create a new boundary item, using the input to set it up
            </summary>
            <param name="filePath">Full path name to time series file</param>
            <param name="catchmentId">ID of the catchment to connect to</param>
            <param name="quantityId"></param>
            <returns>A fully initialized boundary item</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemRRResult.ToString">
            <summary>
            Custom textual representation
            </summary>
            <returns>Custom textual representation</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemRRResult.GetValue(System.DateTime)">
            <summary>
            Get value for this source, which is the sum of the Total runoff and 
            the Catchment discharge.
            </summary>
            <param name="dateTime">DateTime to get value</param>
            <returns>Value</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemRRResult.GetPreferredTimeStep(System.DateTime,System.TimeSpan,System.TimeSpan,System.Double,System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemRRResult.GetAccumulatedValue(System.DateTime,System.DateTime)">
            <summary>
            Get the accumulated value for this source, which is the sum of the Total runoff and 
            the Catchment discharge.
            </summary>
            <param name="start">Start dateTime to get value</param>
            <param name="end">End dateTime to get value</param>
            <returns>value</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemRRResult.Validate">
            <summary>
            Validate this
            </summary>
            <returns>IDiagnostics with issues</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemRRResult.GetNextTransitionTime(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemRRResult.ResultStartTime(DHI.Mike1D.Generic.IFilePath,DHI.Mike1D.Generic.IDiagnostics)">
            <summary>
            Return the start time of the results in the specified resultfile 
            </summary>
            <param name="filePath"></param>
            <param name="diagnostics"> </param>
            <returns></returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemRRResult.ResultEndTime(DHI.Mike1D.Generic.IFilePath,DHI.Mike1D.Generic.IDiagnostics)">
            <summary>
            Return the end time of the results in the specified resultfile 
            </summary>
            <param name="filePath"></param>
            <param name="diagnostics"> </param>
            <returns></returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemRRResult.Prepare(System.DateTime,System.DateTime,DHI.Mike1D.Generic.IDiagnostics)">
            <inheritdoc />
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemRRResult.ResultDataBuffer">
            <summary>
            A set of <see cref="T:DHI.Mike1D.ResultDataAccess.ResultData"/> objects that are being reused.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemRRResult.RRTimeInterpolator.GetInterval(System.DateTime,System.Double@)">
            <summary>
            Calculate interval and fraction for the time.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemRRResult.ExtensionData">
            <summary>
            Data from an extended DataContract not recognized here
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.BoundaryItemSWQ">
            <summary>
            SWQ boundary item implementation, placeholder for the <see cref="P:DHI.Mike1D.BoundaryModule.BoundaryItemSWQ.SWQId"/> and not a "real" <see cref="T:DHI.Mike1D.BoundaryModule.IBoundaryItem"/>.
            <para>
            Only applicable for component items of a <see cref="T:DHI.Mike1D.BoundaryModule.CatchmentComponentSourceBoundary"/>.
            Requires that the <see cref="P:DHI.Mike1D.BoundaryModule.BoundaryItemSWQ.SWQId"/> is present in the <code>RainfallRunoffData.Pollutants</code>.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemSWQ.SWQId">
            <summary>
            Id of the SWQ model parameters
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemSWQ.Create(System.String)">
            <summary>
            BoundaryItemConstant factory, creates and returns a new object.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemSWQ.DHI#Mike1D#BoundaryModule#IBoundaryItem#EumQuantity">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemSWQ.DHI#Mike1D#BoundaryModule#IBoundaryItem#GetValue(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemSWQ.DHI#Mike1D#BoundaryModule#IBoundaryItem#GetAccumulatedValue(System.DateTime,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemSWQ.Validate">
            <inheritdoc />
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.BoundaryItemTableConcentration">
            <summary>
            Table concentration item implementation.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemTableConcentration.TableId">
            <summary>
            The Id of the table
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemTableConcentration.Table">
            <summary>
            Table containing runoff per area to concentration.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemTableConcentration.EumQuantity">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemTableConcentration.Create(System.String,System.Int32)">
            <summary>
            BoundaryItemConstant factory, creates and returns a new object.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemTableConcentration.SetValues(System.Int32,System.Double,System.Double)">
            <summary>
            Set values to table concentration at specified index
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemTableConcentration.GetConcentrationValue(System.Double)">
            <summary>
            Gets a concentration for given runoff per area from the table.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemTableConcentration.GetValue(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemTableConcentration.GetAccumulatedValue(System.DateTime,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemTableConcentration.Validate">
            <inheritdoc />
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.BoundarySourceComponentType">
            <summary>
            For Component sources, specifies which type of source it is
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.BoundarySourceComponentType.Default">
            <summary>
            The default type for a component is a concentration.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.BoundarySourceComponentType.Load">
            <summary>
            The source is a load, in kg/day or similar units
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.BoundarySourceComponentType.LoadPerArea">
            <summary>
            The source is a load, in kg/day/area or similar units
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.BoundarySourceComponentType.LoadPerPerson">
            <summary>
            The source is a load, in kg/day/person or similar units
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.BoundarySourceComponentType.TableConcentration">
            <summary>
            The source is determined from a table converting runoff to concentration.
            Can have just a single BoundaryItemTableConcentration item.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.BoundarySourceComponentType.SWQAdvanced">
            <summary>
            The source is an advanced SWQ method.
            Can have just a single BoundarySourceSWQ item.
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.BoundarySourceComponent">
            <summary>
            Boundary source for a component, containing either a concentration type
            source, a load type source, or a specific quantity.
            <para>
            The component sources are used by other than inflow boundaries, as e.g. 
            a wind having a direction and a velocity component. These special types
            of component sources may require the components in a special order.
            They are identified by their <see cref="P:DHI.Mike1D.BoundaryModule.BoundarySourceComponent.Quantity"/> value.
            </para>
            <para>
            The connection to the AD components is defined by the <see cref="P:DHI.Mike1D.BoundaryModule.BoundarySourceComponent.ComponentId"/> value.
            If that is null or empty, it is not an AD component.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundarySourceComponent.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundarySourceComponent.ComponentId">
            <summary>
            The component id to use when coupling to the AD/ST module
            <para>
            If this is null then this is not an AD/ST component
            </para>
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundarySourceComponent.Type">
            <summary>
            Type of component source.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundarySourceComponent.Quantity">
            <summary>
            Short-cut for setting <see cref="P:DHI.Mike1D.BoundaryModule.BoundarySourceComponent.ComponentId"/> and <see cref="P:DHI.Mike1D.BoundaryModule.BoundarySourceComponent.EumQuantity"/>
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundarySourceComponent.Items">
            <summary>
            A list of all items attached to the source
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundarySourceComponent.Modifier">
            <summary>
            A modifier that you can assign run-time to the setup, to handle 
            e.g. putting noise to the model or in other ways change the value.
            <para>
            Default is null
            </para>
            <para>
            The value is provided in the engine unit and must be returned in the engine unit.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundarySourceComponent.EumQuantity">
            <summary>
            The eum-quantity of the values. Used to handle unit conversion of 
            the values from the boundary to the engine. 
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.BoundarySourceComponent.ConversionFactors">
            <summary>
            Unit conversion factors set up during prepare.
            List of factors must match the list of items.
            Factors are used to convert from item units to 
            <see cref="P:DHI.Mike1D.BoundaryModule.BoundarySourceComponent.EumQuantity"/>
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundarySourceComponent.GetValue(System.DateTime)">
            <summary>
            Get value of the component.
            </summary>
            <param name="date">Date/time to get value for</param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundarySourceComponent.TryModify(System.Double,System.DateTime)">
            <summary>
            Try modify boundary value, if <see cref="P:DHI.Mike1D.BoundaryModule.BoundarySourceComponent.Modifier"/> is not null
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.BoundarySourceComponentUnitConverter">
            <summary>
            Class for unit conversion of component boundary values
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundarySourceComponentUnitConverter.#ctor(DHI.Mike1D.BoundaryModule.IBoundarySource,System.Int32,DHI.Generic.MikeZero.eumUnit,System.Boolean)">
            <summary>
            Constructor, creating scale factor and offset from eum units. 
            If the units are not equivalent and <paramref name="unitsMustBeEquivalent"/> is set, 
            default values are used (scale is 1 and offset is 0).
            </summary>
            <param name="source">Source</param>
            <param name="boundaryComponentIndex">Index of component</param>
            <param name="targetUnit">Target unit</param>
            <param name="unitsMustBeEquivalent">Flag specifying whether to calculate scale and offset even though units are not equivalent </param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundarySourceComponentUnitConverter.#ctor(DHI.Mike1D.BoundaryModule.IBoundarySource,System.Int32,DHI.Generic.MikeZero.eumUnit)">
            <summary>
            Constructor, creating scale factor and offset from eum units. The units must be equivalent, default values
            are used (scale is 1 and offset is 0).
            </summary>
            <param name="source">Source</param>
            <param name="boundaryComponentIndex">Index of component</param>
            <param name="targetUnit">Target unit</param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundarySourceComponentUnitConverter.GetValue(System.DateTime)">
            <summary>
            Get value from boundary, including unit conversion.
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.ComponentScope">
            <summary>
            Enumeration specifying where component belongs
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.ComponentScope.ADComponent">
            <summary> AD component </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.ComponentScope.SedimentFraction">
            <summary> Sediment fraction </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.CatchmentResultFile">
            <summary>
            Catchment result file, containing rainfall runoff and/or catchment discharge.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.CatchmentResultFile.BoundaryID">
            <summary>
            ID of boundary
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.CatchmentResultFile._boundaryID">
            <summary> See <see cref="P:DHI.Mike1D.BoundaryModule.IBoundarySource.BoundaryID"/> </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.CatchmentResultFile.CatchmentIds">
            <summary>
            List of catchment ID's to use from catchment result file. If null, all catchments from the file is being loaded.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.CatchmentResultFile.FilePath">
            <summary>
            Path to RR result file containing Runoff or Catchment Discharge.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.CatchmentResultFile.ComponentResultFiles">
            <summary>
            List of paths to RR component (pollutant or sediment) result file.
            <para>
            Files must contain component concentration or loads for catchments in the Runoff result file.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.CatchmentResultFile.Components">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.CatchmentResultFile.GetValue(System.Int32,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.CatchmentResultFile.GetAccumulatedValue(System.Int32,System.DateTime,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.CatchmentComponentResultFile">
            <summary>
            Component result file, for adding AD and sediment component loads from result file to network.
            <para>
            It will only add component load if the HD result file does also contain that catchment.
            I.e. if component result file contains data from more catchments than the HD result file,
            the additional catchments will be ignored.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.CatchmentComponentResultFile.Scope">
            <summary>
            Which types of components to use from result file. Can include more than one type of components
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.CatchmentComponentResultFile.ComponentIds">
            <summary>
            Components to use from result file. If null or empty, it will use all components defined in the setup.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.CatchmentComponentResultFile.FilePath">
            <summary>
            Path to RR result file containing Runoff or Catchment Discharge.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.GriddedSourceWeightCalculationType.Automatic">
            <summary>
            Calculate weights automatically
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.GriddedSourceWeightCalculationType.UserDefined">
            <summary>
            Use the user defined weights.
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.GriddedSource">
            <summary>
            A gridded source is specifying a 2D grid of source values.
            <para>
            Use the <see cref="P:DHI.Mike1D.BoundaryModule.GriddedSource.UseGlobally"/> to apply this boundary to all catchments overlapping the grid.
            </para>
            <para>
            Specify explicitly the catchments that should use this grid in the <see cref="P:DHI.Mike1D.BoundaryModule.GriddedSource.CatchmentGriddedWeights"/>. 
            It is optional to provide the <see cref="P:DHI.Mike1D.BoundaryModule.CatchmentGriddedWeights.Weights"/>, if not specified, weights are calculated automatically.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.GriddedSource.UseGlobally">
            <summary>
            Flag specifying that this grid should be applied globally to all catchment and weights
            are calculated automatically.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.GriddedSource.FilePath">
            <summary>
            Path to 2D data
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.GriddedSource.ValueType">
            <summary>
            Type of value in the time series. Set to null to use information stored in the grid file itself. 
            If set to some value, it will override the information stored in the grid file.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.GriddedSource.CatchmentGriddedWeights">
            <summary>
            The catchments that uses this boundary. It also can hold the catchment weights, i.e. 
            for each catchment specifying which cells in the grid
            that is inside the catchment, and a weight for calculation the average source contribution
            of all included cells.
            <para>
            If no weights are defined, only catchment ID's, weights will be calculated automatically
            </para>
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.CatchmentGriddedWeights">
            <summary>
            For a catchment, specifying which cells of a grid that is inside this catchment, 
            and for each cell specifying the weight for calculating the average cell contribution.
            <para>
            If the <see cref="P:DHI.Mike1D.BoundaryModule.CatchmentGriddedWeights.Weights"/> is null, the weights will be calculated automatically.
            To have a catchment use this grid, and have the weights calculated automatically, 
            then only specify the <see cref="P:DHI.Mike1D.BoundaryModule.CatchmentGriddedWeights.CatchmentId"/>.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.CatchmentGriddedWeights.CatchmentId">
            <summary>
            Id of catchment
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.CatchmentGriddedWeights.Weights">
            <summary>
            Cell weights
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.CatchmentGriddedWeights.Flatten">
            <summary>
            Flatten the weights; removes duplicate (I,J) entries and sums their weights.
            The weights will also be sorted.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.CatchmentGriddedWeights.Rescale">
            <summary>
            Rescale all weights to sum to 1
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.GriddedWeight">
            <summary>
            Cell weight, indices and weight value
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.GriddedWeight.I">
            <summary>
            I index
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.GriddedWeight.J">
            <summary>
            J index
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.GriddedWeight.Weight">
            <summary>
            Weights
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.GriddedWeight.CompareTo(DHI.Mike1D.BoundaryModule.GriddedWeight)">
            <summary>
            CompareTo implemented explicitly, to allow automatic sorting of objects.
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.GridToTsProcessor">
            <summary>
            Class that calculates time series from a grid series file and
            a set of catchment weights.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.GridToTsProcessor._grid">
            1) Move to BoundaryData
               - Inputs: dfs2, CatchmentWeights
               - Output: TsCollection
            2) Implement buffering of grid data, include flag
            3) Make abstract version, and specific implementation for dfs2
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.GridToTsProcessor.#ctor(DHI.Mike1D.BoundaryModule.IGridData)">
            <summary>
            Constructor
            </summary>
            <param name="grid"></param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.GridToTsProcessor.Process(System.Collections.Generic.IList{DHI.Mike1D.BoundaryModule.CatchmentGriddedWeights},System.DateTime)">
            <summary>
            Process all the catchment, and creates a <see cref="T:DHI.Mike1D.Generic.TimeSeries.TsCollection"/> containing a time series for each catchment.
            </summary>
            <param name="catchmentGriddedWeights">Catchment with weights</param>
            <param name="startTime">In case the grid file has a relative time axis, this is the start time of the time series.</param>
            <returns></returns>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.IGridData">
            <summary>
            Interface for a generic type of grid, used by the <see cref="T:DHI.Mike1D.BoundaryModule.GridToTsProcessor"/>
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IGridData.Open">
            <summary>
            Open grid file
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IGridData.Close">
            <summary>
            Close grid file
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IGridData.NumberOfTimeSteps">
            <summary>
            Number of time steps in grid file
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IGridData.TimeType">
            <summary>
            Time step type in grid file
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IGridData.TimeStep">
            <summary>
            Time step size in seconds in grid file, for equidistant type time axis
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IGridData.StartTime">
            <summary>
            Start time of data in grid file, for grids with calendar type time axis
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IGridData.ItemValueType">
            <summary>
            Item value type
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IGridData.Quantity">
            <summary>
            Quantity in grid file
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IGridData.XCount">
            <summary>
            Number of elements in x direction
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IGridData.GetTimeStep(System.Int32,System.Double@)">
            <summary>
            Get value for time step
            </summary>
            <param name="timestepIndex"></param>
            <param name="timeSinceStart"></param>
            <returns></returns>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.GridDfs2Data">
            <summary>
            Class for accessing dfs2 data in the <see cref="T:DHI.Mike1D.BoundaryModule.GridToTsProcessor"/>.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.GridDfs2Data.BufferData">
            <summary>
            Bool indicating if data should be read once and buffered in memory,
            for fast processing. 
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.GridDfs2Data.ConvertToBaseUnit">
            <summary>
            Bool indicating if data should be converted to base unit (SI) when loading. 
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.GridDfs2Data.#ctor(System.String,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="dfs2FilePath"></param>
            <param name="itemNumber"></param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.GridDfs2Data.Open">
            <inheritdoc/>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.GridDfs2Data.Close">
            <inheritdoc/>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.GridDfs2Data.GetTimeStep(System.Int32,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.GridDfs2Data.NumberOfTimeSteps">
            <inheritdoc/>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.GridDfs2Data.TimeType">
            <inheritdoc/>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.GridDfs2Data.TimeStep">
            <inheritdoc/>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.GridDfs2Data.StartTime">
            <inheritdoc/>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.GridDfs2Data.ItemValueType">
            <inheritdoc/>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.GridDfs2Data.Quantity">
            <inheritdoc/>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.GridDfs2Data.XCount">
            <inheritdoc/>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.StructureSourceBoundary">
            <summary>
            Structure source boundary. All catchments are identified by
            a structure ID which is a string.
            
            If StructureSourceBoundaryType is StructureSourceBoundaryTypes.DamBreak, then 
            the boundary contains three components: 1) Breach level, 2) Breach width, and 3) Breach slope
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.StructureSourceBoundary.BoundarySourceType">
            <summary>
            Boundary source type is always Structure
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.StructureSourceBoundary.StructureId">
            <summary>
            ID of the structure that this boundary connects to
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.StructureSourceBoundary.Location">
            <summary>
            Location of the structure that this boundary connects to
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.StructureSourceBoundary.GetValue(System.DateTime)">
            <summary>
            Get value for this source
            </summary>
            <param name="date">DateTime to get value</param>
            <returns>Value</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.StructureSourceBoundary.GetAccumulatedValue(System.DateTime,System.DateTime)">
            <summary>
            Get accumulated value for this source at the given time span
            </summary>
            <returns>
            Value
            </returns>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.StructureSourceBoundary.StructureSourceBoundaryType">
            <summary>
            StructureSourceBoundary Type - currently only Discharge is implemented
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.StructureSourceBoundary.Validate(System.DateTime,System.DateTime)">
            <summary>
            Validate whether this source is correctly setup
            </summary>
            <returns>IDiagnostics with issues from this component only</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.StructureSourceBoundary.ToString">
            <summary>
            Custom ToString - a textual representation of the BoundarySource
            </summary>
            <returns></returns>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.StructureSourceBoundaryTypes">
            <summary>
            Type of Catchmentsource boundary
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.StructureSourceBoundaryTypes.DamBreak">
            <summary>
            DamBreak with three components: Breach level, width, and slope
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.StructureSourceBoundaryTypes.DamBreakNWSPiping">
            <summary>
            DamBreak with for components: 
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.IStructureSourceBoundary">
            <summary>
            Interface for a StructureSourceBoundary. Interfaces
            for Strucure location.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IStructureSourceBoundary.StructureSourceBoundaryType">
            <summary>
            Structure boundary time
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IStructureSourceBoundary.Location">
            <summary>
            A list of all Structure ID's associated with this Source. It can be empty, then
            the source is assumed to be globally valid.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IStructureSourceBoundary.StructureId">
            <summary>
            ID of the structure that this boundary connects to
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.GlobalGeoLocatedSource">
            <summary>
            A global source that has a geographical position associated with it.
            <para>
            A global source can have several geo-located sources, and the closest geo-located source
            can be used. 
            </para>
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.GlobalGeoLocatedSource.#ctor(DHI.Mike1D.BoundaryModule.GlobalSourceBoundaryTypes)">
            <summary>
            Constructor
            </summary>
            <param name="globalSourceBoundaryType"></param>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.GlobalGeoLocatedSource.GeoPoint">
            <summary>
            Point/position where source is located.
            <para>
            If there is only one geo-located source in the global item, the <see cref="P:DHI.Mike1D.BoundaryModule.GlobalGeoLocatedSource.GeoPoint"/> may be null.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.GlobalGeoLocatedSource.BoundarySourceType">
            <inheritdoc />
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.GlobalGeoLocatedSource.GlobalSourceBoundaryType">
            <summary>
            Type of global source boundary
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.GlobalGeoLocatedSource.GetValue(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.GlobalGeoLocatedSource.GetAccumulatedValue(System.DateTime,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.GlobalGeoLocatedSource.Validate(System.DateTime,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.PeriodicItem.IListIPeriodicSpecialDays">
            <summary>
            Interface for a list of <see cref="T:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicSpecialDay"/>'s
            Required for generic list COM interop
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.IListIPeriodicSpecialDays.Add(DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicSpecialDay)">
            <summary>
            Add a <see cref="T:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicSpecialDay"/> to the list
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.IListIPeriodicSpecialDays.Item(System.Int32)">
            <summary>
            Get or set the <see cref="T:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicSpecialDay"/> at the specified index in the list
            </summary>
            <param name="index">Index in list</param>
            <returns><see cref="T:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicSpecialDay"/> at the index</returns>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.IListIPeriodicSpecialDays.Count">
            <summary>
            The number of <see cref="T:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicSpecialDay"/>'s in the list
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.IListIPeriodicSpecialDays.IndexOf(DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicSpecialDay)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire List. 
            </summary>
            <param name="item">The object to locate in the List. The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within the entire List, if found; otherwise, –1. </returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.IListIPeriodicSpecialDays.Contains(DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicSpecialDay)">
            <summary>
            Determines whether the list contains a specific value.
            </summary>
            <param name="item">The object to locate in the List. The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <returns>true if item is found in the list otherwise, false. </returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.IListIPeriodicSpecialDays.Find(System.Predicate{DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicSpecialDay})">
            <summary>
            Searches for an element that matches the conditions defined by 
            the specified predicate, and returns the first occurrence within 
            the entire List. 
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type IPeriodicSpecialDay. </returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.IListIPeriodicSpecialDays.Remove(DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicSpecialDay)">
            <summary>
            Removes the first occurrence of a specific object from the List. 
            </summary>
            <param name="item">The object to remove from the List. The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <returns>true if item is successfully removed; otherwise, false. This method also returns false if item was not found in the List. </returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.IListIPeriodicSpecialDays.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the List. 
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <remarks>This method is an O(n) operation</remarks>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.IListIPeriodicSpecialDays.Clear">
            <summary>
            Removes all elements from the List.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.IListIPeriodicSpecialDays.ToArray">
            <summary>
            Copies all elements of the list to an array.
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.PeriodicItem.ListIPeriodicSpecialDays">
            <summary>
            Class implementing a list of IPeriodicSpecialDay's
            Required for generic list COM interop
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.ListIPeriodicSpecialDays.#ctor">
            <summary>
            Initializes a new instance of the List class that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.ListIPeriodicSpecialDays.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the List class that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of elements that the new list can initially store.</param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.ListIPeriodicSpecialDays.#ctor(System.Collections.Generic.IEnumerable{DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicSpecialDay})">
            <summary>
            Initializes a new instance of the List class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile">
            <summary>
            Implementation of <see cref="T:DHI.Mike1D.BoundaryModule.PeriodicItem.IOneDayProfile"/>
            
            A <see cref="T:DHI.Mike1D.BoundaryModule.PeriodicItem.IOneDayProfile"/> is a list of pairs of
            TimeOfDay times and values that repeat every day.
            
            A <see cref="T:DHI.Mike1D.BoundaryModule.PeriodicItem.IOneDayProfile"/> is a set of pairs of times and values. 
            Times are the TimeOfDay part of a date, the first one must have
            zero TimeOfDay part (beginning of day), all elements must have 
            increasing TimeOfDay parts.
            
            Data is stored in an time series item (because it has all the interpolation
            routines), and the type of values (instantaneous, forward step etc. must
            be proveded at creation. 
            
            A special version exists where the values are defined to be instantaneous
            in the middle between two times, see <see cref="M:DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile.CreateMidpointValues(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.String,DHI.Mike1D.Generic.IDiagnostics)"/>
            
            Values can be absolute or relative. When relative, GetValue will in general not
            return the values that was given as input. The values are scaled such that if 
            integrating GetValue(t) over a day, the result is one.
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile.ValueType">
            <summary>
            Enumeration defining the meaning of the value in the time series.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile.ValueType.Instantaneous">
            <summary>
            The values are representative at one precise instance of time.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile.ValueType.BackwardStep">
            <summary>
            The values are representative of the average value 
            over one time step, from the previous time step to this time step.
            </summary>
            <remarks>
            This is what is called Mean_Step_Accumulated in the DFS system
            </remarks>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile.ValueType.ForwardStep">
            <summary>
            The values are representative of the average value 
            over one time step, from the this time step to the next time step.
            </summary>
            <remarks>
            This is what is called Reverse_Mean_Step_Accumulated in the DFS system
            </remarks>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile._relativeTimes">
            <summary>
            Relative times, from 0 to 1
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile._values">
            <summary>
            Values
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile._valueType">
            <summary>
            Type of values
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile._relative">
            <summary>
            Flag specifying whether values are relative and assumed to have a
            value of 1 in average over a day.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile._tsData">
            <summary>
            Ts data, using day as relative time axis scale.
            <para>
            Computational value only
            </para>
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile._integralScaleFactor">
            <summary>
            Scale factor to multiply the <see cref="F:DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile._values"/> such that the average
            values over one day is one.
            <para>
            Computational value only
            </para>
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile.Id">
            <summary>
            ID of Daily Pattern
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile.Values">
            <summary>
            Values macthing the <see cref="P:DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile.RelativeTimes"/> array
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile.RelativeTimes">
            <summary>
            Relative times, from 0 to 1, where the value of 1 is one day.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile.Relative">
            <summary>
            Specifies whether the DailyPattern is relative or absolute. If relative, 
            the DailyPattern is scaled such that its values integrates to 1 over one day.
            Default is true.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile.Prepare(System.DateTime,System.DateTime,DHI.Mike1D.Generic.IDiagnostics)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile.GetValue(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile.GetAccumulatedValue(System.DateTime,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile.CalculateScaleFactor">
            <summary>
            If _relative, calculate _integralScaleFactor, such that 
            \integral_day _integralScaleFactor*dataTs dt = 1 
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile.ToString">
            <summary>
            String describing the object
            </summary>
            <returns>Description</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile.Create(DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile.ValueType,System.Collections.Generic.IList{System.DateTime},System.Collections.Generic.IList{System.Double})">
            <summary>
            Creating a <see cref="T:DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile"/> assuming that each value[i] is
            defined based on the <paramref name="valueType"/>.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile.CreateMidpointValues(System.Collections.Generic.IList{System.DateTime},System.Collections.Generic.IList{System.Double},System.String,DHI.Mike1D.Generic.IDiagnostics)">
            <summary>
            Creating a <see cref="T:DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile"/> assuming that each value[i] is
            defined in the middle of the interval times[i] to times[i+1], assuming that
            the value is valid until time 60*60*24 (secondsInOneDay).
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile.Create(DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile.ValueType,System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double})">
            <summary>
            Creating a <see cref="T:DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile"/> assuming that each value[i] is
            defined based on the <paramref name="valueType"/>.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile.CreateMidpointValues(System.Collections.Generic.IList{System.Double},System.Collections.Generic.IList{System.Double},System.String,DHI.Mike1D.Generic.IDiagnostics)">
            <summary>
            Creating a <see cref="T:DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile"/> assuming that each value[i] is
            defined in the middle of the interval times[i] to times[i+1], assuming that
            the value is valid until time 60*60*24 (secondsInOneDay).
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.OneDayTsProfile.ExtensionData">
            <inheritdoc />
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicScheduler">
            <summary>
            Default implementation of <see cref="T:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicScheduler"/>
            
            The GetValue results are buffered. If updating
            the SpecialDays or the SchedulePatternMatch, call Reset() 
            in order to reset the buffer.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicScheduler.Id">
            <summary>
            Id of Periodic Pattern
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicScheduler._bufferLastDate">
            <summary>
            Buffer values, such that if GetValue is called
            with the same date, the last retrieved value
            is returned.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicScheduler.SpecialDays">
            <summary>
            Special days. Set to null to remove existing/disable.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicScheduler.ScheduleProfileMap">
            <summary>
            Schedule-DailyPattern map, ordered such that the top most ones
            are tested first
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicScheduler.Add(DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicSchedule,DHI.Mike1D.BoundaryModule.PeriodicItem.IOneDayProfile)">
            <summary>
            Add a schedule and a dailyPattern to the PeriodicScheduler
            </summary>
            <param name="schedule">Schedule to use</param>
            <param name="dailyPattern">dailyPattern that is used with Schedule</param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicScheduler.RemoveAt(System.Int32)">
            <summary>
            Remove a schedule and a dailyPattern at the specified index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicScheduler.Count">
            <summary>
            Number of Schedule-Pattern pairs
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicScheduler.GetScheduleAt(System.Int32)">
            <summary>
            Return the Schedule for the Schedule-dailyPattern pair at the specified index
            </summary>
            <param name="index">index in list to retrieve</param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicScheduler.GetProfileAt(System.Int32)">
            <summary>
            Return the Schedule for the Schedule-dailyPattern pair at the specified index
            </summary>
            <param name="index">index in list to retrieve</param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicScheduler.GetValue(System.DateTime)">
            <summary>
            Get the value of the periodic pattern at the given date.
            </summary>
            <param name="date">Input date</param>
            <returns>Value at input date</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicScheduler.GetAccumulatedValue(System.DateTime,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicScheduler.ResetBuffer">
            <summary>
            Reset the buffer, in case changes have been made to the
            object, the buffer may no longer contain the correct
            value.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicScheduler.Validate">
            <summary>
            Validate this
            </summary>
            <returns>IDiagnostics with issues</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicScheduler.Prepare(System.DateTime,System.DateTime,DHI.Mike1D.Generic.IDiagnostics)">
            <inheritdoc />
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicScheduler.ExtensionData">
            <summary>
            Data from an extended DataContract not recognized here
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicSchedule">
            <summary>
            Default implementation of <see cref="T:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicSchedule"/>.
            <para>
            In this schedule you define individually which of the days (1-31), 
            months (1-12) and weekdays (Monday-Sunday) that the schedule it is active. 
            All checks must return true before a schedule is active. 
            </para>
            <para>
            When checking for a given date/time, the weekday is provided explicitly. 
            The weekday of a given date may have been overridden by a special day.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicSchedule.Id">
            <summary>
            ID of periodic schedule
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicSchedule.DaysOfWeek">
            <summary>
            Array of length 7 indicating which days of the week that
            is part of this schedule. First element (index zero) is
            sunday, last is saturday. Set to null to disable use of DaysOfWeek,
            i.e., all days of the week are part of this schedule.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicSchedule.Days">
            <summary>
            Array of length 31 indicating which days of the month that
            is part of this schedule. First element (index zero) is
            the first of the month. If month has less than 31 days, the
            last elements are just ignored. Set to null to disable use of days,
            i.e., all days are part of this schedule.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicSchedule.Months">
            <summary>
            Array of length 12 indicating which months of the year that
            is part of this schedule. First element (index zero) is
            January, last is December. Set to null to disable use of months,
            i.e., all months are part of the schedule.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicSchedule.Check(System.DateTime,System.Int32)">
            <summary>
            Check whether this date is part of the schedule.
            Use if date is to be checked only against this schedule.
            Otherwice, precalculate date.DayOfWeek, date.Day and date.Months
            and used optimized version of Check.
            </summary>
            <param name="date">Date to check</param>
            <param name="specialDayOfWeek">Overrides date.DayOfWeek if 0-6, use -1 to disable</param>
            <returns>True if input is part of schedule, false if not</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicSchedule.Check(System.Int32,System.Int32,System.Int32)">
            <summary>
            Check whether a date, defined by its dayOfWeek, dayOfMonth and month
            is part of this schedule. Use if dayOfWeek, dayOfMonth and month
            is precalculated from a date (for optimization)
            </summary>
            <param name="dayOfWeek">Integer 0-7, 0 is sunday, 6 is saturdag</param>
            <param name="dayOfMonth">Integer 1-31 indicating day of month</param>
            <param name="month">Integer 1-12, 1 is January, 12 is December</param>
            <returns>True if input is part of schedule, false if not</returns>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicSchedule.ExtensionData">
            <summary>
            Data from an extended DataContract not recognized here
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicSpecialDay">
            <summary>
            Default implementation of <see cref="T:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicSpecialDay"/>
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicSpecialDay.Id">
            <summary>
            ID for Special day
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicSpecialDay._yearly">
            <summary>
            Flag specifying whether the special day occurs every year 
            or only the specific year. If every year, month/day is used
            otherwise date is used.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicSpecialDay._date">
            <summary>
            Specific date, with no time value
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicSpecialDay._mon">
            <summary>
            Cached value of _date.Months
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicSpecialDay._day">
            <summary>
            Cached value of _date.Day
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicSpecialDay.#ctor(System.DateTime,System.Boolean)">
            <summary>
            Create new special day on the specified DateTime.Date. 
            indicating whether the date is specific or yearly recurring.
            </summary>
            <param name="date">The date of the special day, only date part of the DateTime is used.</param>
            <param name="yearly">true if yearly recurring, false otherwise.</param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicSpecialDay.initialize">
            <summary>
            Set up default values, should be called by all constructors
            and deserializers.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicSpecialDay.Usage">
            <summary>
            Set how to use this special day.
            <list type="bullet">
              <item><term>-1 :</term><description>Do not use this.</description></item>
              <item><term>0-6 :</term><description>weekdays, as returned by DateTime: 0=sunday,..., 6=saturday.</description> </item>
            </list>
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicSpecialDay.Check(System.DateTime,System.Int32@)">
            <summary>
            Check whether a date matches this special day. A usage is returned
            if the date matches the specialday. See also optimized version below,
            to use when date.Month and date.Day is precalculated.
            </summary>
            <param name="date">Date to check</param>
            <param name="usage">Outputs the usage of this special day</param>
            <returns>true if the date matches.</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicSpecialDay.Check(System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Check whether a date matches this special day. A usage is returned
            if the date matches the specialday. Optimized version, when 
            the date.Month and date.Day is precalculated.
            </summary>
            <param name="date">Date to check</param>
            <param name="dateMonth">Date to check, must be date.Month, 1-12</param>
            <param name="dateDay">Date to check, must be date.Day, 1-31</param>
            <param name="usage">Outputs the usage of this special day</param>
            <returns>true if the date matches.</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicSpecialDay.OnDeserializedMethod(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method that is called after object has been deserialized.
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.PeriodicSpecialDay.ExtensionData">
            <summary>
            Data from an extended DataContract not recognized here
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.PeriodicItem.BoundaryItemPeriodic">
            <summary>
            Periodic boundary item implementation
            
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.BoundaryItemPeriodic.EumQuantity">
            <inheritdoc />
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.BoundaryItemPeriodic.Id">
            <summary>
            Id of periodic boundary item
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.PeriodicItem.BoundaryItemPeriodic._id">
            <summary>
            Id of periodic boundary item
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.BoundaryItemPeriodic.AverageValue">
            <summary>
            Average value of this periodic boundary item.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.PeriodicItem.BoundaryItemPeriodic._averageValue">
            <summary>
            Average value of this periodic boundary item.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.BoundaryItemPeriodic.PeriodicScheduler">
            <summary>
            Periodic pattern that this boundary item is using.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.PeriodicItem.BoundaryItemPeriodic._periodicScheduler">
            <summary>
            Periodic pattern that this boundary item is using.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.BoundaryItemPeriodic.Create(System.Double)">
            <summary>
            BoundaryItemPeriodic factory, creates and returns a new
            object. This does not have a periodicPattern assigned, 
            so it is only partly initialized.
            </summary>
            <param name="averageValue">The average value.</param>
            <returns>A partly initialized BoundaryItemPeriodic object.</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.BoundaryItemPeriodic.ToString">
            <summary>
            Custom textual representation
            </summary>
            <returns>Custom textual representation</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.BoundaryItemPeriodic.Prepare(System.DateTime,System.DateTime,DHI.Mike1D.Generic.IDiagnostics)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.BoundaryItemPeriodic.GetValue(System.DateTime)">
            <summary>
            Get value for this source
            </summary>
            <param name="dateTime">DateTime to get value</param>
            <returns>Value</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.BoundaryItemPeriodic.GetAccumulatedValue(System.DateTime,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.BoundaryItemPeriodic.Validate">
            <summary>
            Validate this
            </summary>
            <returns>IDiagnostics with issues</returns>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.BoundaryItemPeriodic.ExtensionData">
            <summary>
            Holds data from an extended DataContract
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.PeriodicItem.AlwaysSchedule">
            <summary>
            A <see cref="T:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicSchedule"/> that always returns true.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.AlwaysSchedule.Id">
            <summary>
            ID of periodic schedule
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.AlwaysSchedule.DaysOfWeek">
            <inheritdoc />
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.AlwaysSchedule.Days">
            <inheritdoc />
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.AlwaysSchedule.Months">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.AlwaysSchedule.Check(System.DateTime,System.Int32)">
            <summary>
            Check whether this date is part of the schedule.
            Use if date is to be checked only against this schedule.
            Otherwice, precalculate date.DayOfWeek, date.Day and date.Months
            and used optimized version of Check.
            </summary>
            <param name="date">Date to check</param>
            <param name="specialDayOfWeek">Overrides date.DayOfWeek if 0-6, use -1 to disable</param>
            <returns>True if input is part of schedule, false if not</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.AlwaysSchedule.Check(System.Int32,System.Int32,System.Int32)">
            <summary>
            Check whether a date, defined by its dayOfWeek, dayOfMonth and month
            is part of this schedule. Use if dayOfWeek, dayOfMonth and month
            is precalculated from a date (for optimization)
            </summary>
            <param name="dayOfWeek">Integer 0-7, 0 is sunday, 6 is saturdag</param>
            <param name="dayOfMonth">Integer 1-31 indicating day of month</param>
            <param name="month">Integer 1-12, 1 is January, 12 is December</param>
            <returns>True if input is part of schedule, false if not</returns>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.AlwaysSchedule.ExtensionData">
            <summary>
            Data from an extended DataContract not recognized here
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.PeriodicItem.IBoundaryItemPeriodic">
            <summary>
            Interface for periodic boundary item.
            
            A periodic boundary item has a <see cref="T:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicScheduler"/>
            The value from the <see cref="T:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicScheduler"/> is multiplied
            with the <see cref="P:DHI.Mike1D.BoundaryModule.PeriodicItem.IBoundaryItemPeriodic.AverageValue"/> to get the value of the item.
            
            The <see cref="P:DHI.Mike1D.BoundaryModule.PeriodicItem.IBoundaryItemPeriodic.PeriodicScheduler"/> usually returns a value that 
            accumulates to 1 over one day, hence the <see cref="T:DHI.Mike1D.BoundaryModule.PeriodicItem.IBoundaryItemPeriodic"/>
            will in that case have the <see cref="P:DHI.Mike1D.BoundaryModule.PeriodicItem.IBoundaryItemPeriodic.AverageValue"/> as the average
            of the day.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.IBoundaryItemPeriodic.Id">
            <summary>
            Id of periodic boundary item
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.IBoundaryItemPeriodic.AverageValue">
            <summary>
            Average value of this periodic boundary item.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.IBoundaryItemPeriodic.PeriodicScheduler">
            <summary>
            Periodic pattern that this boundary item is using.
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.PeriodicItem.IOneDayProfile">
            <summary>
            Interface for a profile covering one day.
            
            The DateTime input to the <see cref="M:DHI.Mike1D.BoundaryModule.PeriodicItem.IOneDayProfile.GetValue(System.DateTime)"/> function
            only uses the TimeOfDay part to evaluate the value
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.IOneDayProfile.Id">
            <summary>
            ID of Daily Pattern
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.IOneDayProfile.Prepare(System.DateTime,System.DateTime,DHI.Mike1D.Generic.IDiagnostics)">
            <summary>
            Prepare item for simulation.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.IOneDayProfile.GetValue(System.DateTime)">
            <summary>
            Get the value of the daily pattern at the given date.
            Only the time of day part of the date is used.
            </summary>
            <param name="date">Input date</param>
            <returns>Value at input date</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.IOneDayProfile.GetAccumulatedValue(System.DateTime,System.DateTime)">
            <summary>
            Get the accumulated value of the one-day-profile in the given interval.
            Only the time of day part of the date is used. 
            If start is exactly on midnight, is it assumed to be 0 hours.
            If end is exactly on midnigt is is assumed to be 24 hours.
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicScheduler">
             <summary>
             Interface for a periodic scheduler.
             
             A periodic scheduler has a number of <see cref="T:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicSchedule"/>
             with each their <see cref="T:DHI.Mike1D.BoundaryModule.PeriodicItem.IOneDayProfile"/> attached. It searches through
             the list of <see cref="T:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicSchedule"/>s and finds the first active one
             and uses its <see cref="T:DHI.Mike1D.BoundaryModule.PeriodicItem.IOneDayProfile"/>
            
             Special days can be added, in order to change the weekday
             behavior of some special days, using a given date as a 
             sunday or similar.
             </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicScheduler.Id">
            <summary>
            Id of Periodic Pattern
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicScheduler.SpecialDays">
            <summary>
            Special days. Set to null to remove existing/disable.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicScheduler.ScheduleProfileMap">
            <summary>
            Schedule-DailyPattern map, ordered such that the top most ones
            are tested first
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicScheduler.Add(DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicSchedule,DHI.Mike1D.BoundaryModule.PeriodicItem.IOneDayProfile)">
            <summary>
            Add a schedule and a dailyPattern to the PeriodicScheduler
            </summary>
            <param name="schedule">Schedule to use</param>
            <param name="oneDayProfile">dailyPattern that is used with Schedule</param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicScheduler.RemoveAt(System.Int32)">
            <summary>
            Remove a schedule and a dailyPattern at the specified index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicScheduler.Count">
            <summary>
            Number of Schedule-Pattern pairs
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicScheduler.GetScheduleAt(System.Int32)">
            <summary>
            Return the Schedule for the Schedule-dailyPattern pair at the specified index
            </summary>
            <param name="index">index in list to retrieve</param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicScheduler.GetProfileAt(System.Int32)">
            <summary>
            Return the Schedule for the Schedule-dailyPattern pair at the specified index
            </summary>
            <param name="index">index in list to retrieve</param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicScheduler.GetValue(System.DateTime)">
            <summary>
            Get the value at the given date.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicScheduler.GetAccumulatedValue(System.DateTime,System.DateTime)">
            <summary>
            Get the accumulated value in the time span.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicScheduler.Validate">
            <summary>
            Validate this
            </summary>
            <returns>IDiagnostics with issues</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicScheduler.Prepare(System.DateTime,System.DateTime,DHI.Mike1D.Generic.IDiagnostics)">
            <summary>
            Prepare item for simulation.
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicSchedule">
            <summary>
            A periodic schedule returns true on the <code>Check</code> functions
            if a date is part of the schedule.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicSchedule.Id">
            <summary>
            ID of periodic schedule
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicSchedule.DaysOfWeek">
            <summary>
            Array of length 7 indicating which days of the week that
            is part of this schedule. First element (index zero) is
            sunday, last is saturday. Set to null to disable use of DaysOfWeek,
            i.e., all days of the week are part of this schedule.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicSchedule.Days">
            <summary>
            Array of length 31 indicating which days of the month that
            is part of this schedule. First element (index zero) is
            the first of the month. If month has less than 31 days, the
            last elements are just ignored. Set to null to disable use of days,
            i.e., all days are part of this schedule.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicSchedule.Months">
            <summary>
            Array of length 12 indicating which months of the year that
            is part of this schedule. First element (index zero) is
            January, last is December. Set to null to disable use of months,
            i.e., all months are part of the schedule.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicSchedule.Check(System.DateTime,System.Int32)">
            <summary>
            Check whether this date is part of the schedule.
            Use if date is to be checked only against this schedule.
            Otherwice, precalculate date.DayOfWeek, date.Day and date.Months
            and used optimized version of Check.
            </summary>
            <param name="date">Date to check</param>
            <param name="specialDayOfWeek">Overrides date.DayOfWeek if 0-6, use -1 to disable</param>
            <returns>True if input is part of schedule, false if not</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicSchedule.Check(System.Int32,System.Int32,System.Int32)">
            <summary>
            Check whether a date, defined by its dayOfWeek, dayOfMonth and month
            is part of this schedule. Use if dayOfWeek, dayOfMonth and month
            is precalculated from a date (for optimization)
            </summary>
            <param name="dayOfWeek">Integer 0-7, 0 is sunday, 6 is saturday</param>
            <param name="dayOfMonth">Integer 1-31 indicating day of month</param>
            <param name="month">Integer 1-12, 1 is January, 12 is December</param>
            <returns>True if input is part of schedule, false if not</returns>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicSpecialDay">
            <summary>
            Interface for a Periodic Special day.
            
            A special day that is specific, or recurring yearly.
            
            Only the Date part of a DateTime is used.
            
            Remember to set the usage of the special day. The usage
            tells how this special day is to be handled. It can
            either not be handled, or handled as another weekday.
            
            Use Check(DateTime,...) to test if a DateTime mathces the special day.
            
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicSpecialDay.Id">
            <summary>
            ID for Special day
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicSpecialDay.Usage">
            <summary>
            Set how to use this special day.
            <list type="bullet">
              <item><term>-1 :</term><description>Do not use this.</description></item>
              <item><term>0-6 :</term><description>weekdays, as returned by DateTime: 0=sunday,..., 6=saturday.</description> </item>
            </list>
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicSpecialDay.Check(System.DateTime,System.Int32@)">
            <summary>
            Check whether a date matches this special day. A usage is returned
            if the date matches the specialday. See also optimized version below,
            to use when date.Months and date.Day is precalculated.
            </summary>
            <param name="date">Date to check</param>
            <param name="usage">Outputs the usage of this special day</param>
            <returns>true if the date matches.</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PeriodicItem.IPeriodicSpecialDay.Check(System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Check whether a date matches this special day. A usage is returned
            if the date matches the specialday. Optimized version, when 
            the date.Month and date.Day is precalculated.
            </summary>
            <param name="date">Date to check</param>
            <param name="dateMonth">Date to check, must be date.Month</param>
            <param name="dateDay">Date to check, must be date.Day</param>
            <param name="usage">Outputs the usage of this special day</param>
            <returns>true if the date matches.</returns>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.BoundaryItemTimeSeriesBase">
            <summary>
            Time series boundary item. Generel access to one time series item.
            <para>
            This is a base class for other time series classes, handling the 
            time and values of a time series, time interpolation etc.
            </para>
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.BoundaryItemTimeSeriesBase._tsItem">
            <summary>
            TsItem contains the data for the specified time series.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemTimeSeriesBase.EumQuantity">
            <inheritdoc />
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemTimeSeriesBase.Item">
            <summary>
            TsItem contains the data for the specified time series.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemTimeSeriesBase.GetValue(System.DateTime)">
            <summary>
            Get value for this source
            </summary>
            <param name="dateTime">DateTime to get value</param>
            <returns>Value</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemTimeSeriesBase.GetAccumulatedValue(System.DateTime,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemTimeSeriesBase.GetNextTransitionTime(System.DateTime)">
            <summary>
            Returns the next time when there is a different value (or transition value)
            in the TsItem after the given time.
            </summary>
            <param name="date">Date of the </param>
            <returns>The next transition time</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemTimeSeriesBase.EndTime">
            <summary>
            End time of time series
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemTimeSeriesBase.Prepare(System.DateTime,System.DateTime,DHI.Mike1D.Generic.IDiagnostics)">
            <inheritdoc />
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemTimeSeriesBase.ExtensionData">
            <summary>
            Data from an extended DataContract not recognized here
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.BoundaryItemTimeSeries">
            <summary>
            Time series boundary item. Generel access to time series items, defined
            by a full path name, and an item number.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.BoundaryItemTimeSeries._tsCollection">
            <summary>
            TsCollection, containing header information and the times of the time series data.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemTimeSeries.TsBuffer">
            <summary>
            TsBuffer, common object containing all time series loaded in the setup, for reuse.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemTimeSeries.TsItemAuto">
            <summary>
            TsItem contains the data for the specified time series.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemTimeSeries.EumQuantity">
            <inheritdoc />
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemTimeSeries.TSCollection">
            <summary>
            <see cref="P:DHI.Mike1D.BoundaryModule.BoundaryItemTimeSeries.TSCollection"/> that this item is part of.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemTimeSeries.ValueType">
            <summary>
            Type of value in time.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemTimeSeries.Create(DHI.Mike1D.Generic.IFilePath,System.Int32)">
            <summary>
            Create a new boundary item, using the input to set it up
            </summary>
            <param name="filePath">Full path name to time series file</param>
            <param name="itemIndex">Index of item to use</param>
            <returns>A fully initialized boundary item</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemTimeSeries.Create(DHI.Mike1D.Generic.IFilePath,System.Int32,DHI.Mike1D.Generic.TimeSeries.TsCollection)">
            <summary>
            Create a new boundary item, using the input to set it up
            </summary>
            <param name="filePath">Full path name to time series file</param>
            <param name="itemIndex">Index of item to use</param>
            <param name="tsCollection">TsCollection that holds the time series</param>
            <returns>A fully initialized boundary item</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemTimeSeries.Create(DHI.Mike1D.Generic.IFilePath,System.Int32,DHI.Mike1D.Generic.TimeSeries.TsCollection,DHI.Generic.MikeZero.eumQuantity)">
            <summary>
            Create a new boundary item, using the input to set it up
            </summary>
            <param name="filePath">Full path name to time series file</param>
            <param name="n">Use the n'th item of the specified quantity</param>
            <param name="tsCollection">TsCollection that holds the time series</param>
            <param name="eumQuantity">Restrict search, so that only items of specified quantity are considered.</param>
            <returns>A fully initialized boundary item</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemTimeSeries.ToString">
            <summary>
            Custom textual representation
            </summary>
            <returns>Custom textual representation</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemTimeSeries.Validate">
            <summary>
            Validate this
            </summary>
            <returns>IDiagnostics with issues</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemTimeSeries.Prepare(System.DateTime,System.DateTime,DHI.Mike1D.Generic.IDiagnostics)">
            <inheritdoc />
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemTimeSeries.FilePath">
            <summary>
            File path of time series file
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemTimeSeries.ItemIndex">
            <summary>
            Index of item in the time series file
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemTimeSeries.FailedValidate">
            <summary>
            Flag is set if item already failed validate (typically because the file doesn't exist).
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.CatchmentSourceBoundaries">
            <summary>
            Class implementing a list of ICatchmentSourceBoundary's
            Required for generic list COM interop
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.CatchmentSourceBoundaries.#ctor">
            <summary>
            Initializes a new instance of the List class that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.CatchmentSourceBoundaries.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the List class that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of elements that the new list can initially store.</param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.CatchmentSourceBoundaries.#ctor(System.Collections.Generic.IEnumerable{DHI.Mike1D.BoundaryModule.ICatchmentSourceBoundary})">
            <summary>
            Initializes a new instance of the List class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.CatchmentSourceBoundary">
            <summary>
            Catchment source boundary. All catchments are identified by
            a catchment ID, string.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.CatchmentSourceBoundary._catchmentIds">
            <summary>
            List of Catchment ID strings
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.CatchmentSourceBoundary.BoundarySourceType">
            <summary>
            Boundary source type is always CatchmentSource
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.CatchmentSourceBoundary.CatchmentSourceBoundaryType">
            <summary>
            CatchmentSource Type - currently only Discharge is implemented
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.CatchmentSourceBoundary.CatchmentIds">
            <summary>
            A list of all Catchment ID's associated with this Source. It can be empty, then
            the source is assumed to be globally valid.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.CatchmentSourceBoundary.GetAccumulatedValue(System.DateTime,System.DateTime)">
            <summary>
            Get accumukated value of the catchment source boundary between the start and end time.
            The result is set to a negative value for Evaporation and Abstraction boundary types.
            </summary>
            <param name="start">start time</param>
            <param name="end">end time</param>
            <returns>accumulated value</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.CatchmentSourceBoundary.GetValue(System.DateTime)">
            <summary>
            Get value for this source
            </summary>
            <param name="date">DateTime to get value</param>
            <returns>Value</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.CatchmentSourceBoundary.Validate(System.DateTime,System.DateTime)">
            <summary>
            Validate whether this source is correctly setup
            </summary>
            <returns>IDiagnostics with issues from this component only</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.CatchmentSourceBoundary.ToString">
            <summary>
            Custom ToString - a textual representation of the BoundarySource
            </summary>
            <returns></returns>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.CatchmentSourceBoundary.ExtensionData">
            <summary>
            Data from an extended DataContract not recognized here
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.CatchmentComponentSourceBoundary">
            <summary>
            A special kind of boundary, only used when AD module is enabled, which provides
            component concentrations for catchment inflows.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.CatchmentComponentSourceBoundary.CatchmentQuantity">
            <summary>
            Quantity of catchment flow that the component is related to. 
            <para>
            Default is <code>Quantity.Create(PredefinedQuantity.TotalRunOff)</code>
            though by changing this, the component can be attached to NetRainfall or OverlandFlow or similar.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.CatchmentComponentSourceBoundary.CatchmentIds">
            <summary>
            List of catchment ID's that this is attached to.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.CatchmentComponentSourceBoundary.BoundarySourceType">
            <summary> Not supported </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.CatchmentComponentSourceBoundary.GetValue(System.DateTime)">
            <summary> Not supported </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.CatchmentComponentSourceBoundary.GetValueWithoutDWF(System.DateTime)">
            <summary> Not supported </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.CatchmentComponentSourceBoundary.GetAccumulatedValue(System.DateTime,System.DateTime)">
            <summary> Not supported </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.CatchmentComponentSourceBoundary.GetAccumulatedValue(System.Int32,System.DateTime,System.DateTime)">
            <summary> Not supported </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.CatchmentComponentSourceBoundary.GetNextTransitionTime(System.DateTime)">
            <summary> Not supported </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.CatchmentComponentSourceBoundary.Validate(System.DateTime,System.DateTime)">
            <summary> Not supported </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.CatchmentComponentSourceBoundary.Prepare(System.DateTime,System.DateTime,DHI.Mike1D.Generic.IDiagnostics)">
            <inheritdoc />
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.BoundaryDataXmlBridge">
            <summary>
            Bridge for saving and reading boundary data to/from xml.
            <para>
            This will only store the boundary data component.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryDataXmlBridge.FilePath">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryDataXmlBridge.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.BoundaryItemQH">
            <summary>
            Q(h) boundary item. Access to a Q(h) table. Gets the water level via a DDoubleGetter
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemQH.EumQuantity">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemQH.#ctor(System.Int32)">
            <summary>
            Create Q-h boundary item with specified size of Q-h table
            </summary>
            <param name="qhSize"></param>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemQH.QHTable">
            <summary>
            Q(h) table of values. X is h and Y is Q.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemQH.GetValue(System.DateTime)">
            <summary>
            Not implemented. QH boundaries are used by directly accessing the Qh table
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemQH.GetAccumulatedValue(System.DateTime,System.DateTime)">
            <summary>
            Not implemented. QH boundaries are used by directly accessing the Qh table
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemQH.Validate">
            <summary>
            Validate this Qh table
            </summary>
            <returns>IDiagnostics with issues</returns>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.BoundaryItemQH.ExtensionData">
            <summary>
            Data from an extended DataContract not recognized here
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.BoundaryItemQH.SetValues(System.Int32,System.Double,System.Double)">
            <summary>
            Set values to Q-h table at specified index
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.DistributedSourceBoundaries">
            <summary>
            Class implementing a list of IDistributedSourceBoundary's
            Required for generic list COM interop
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.DistributedSourceBoundaries.#ctor">
            <summary>
            Initializes a new instance of the List class that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.DistributedSourceBoundaries.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the List class that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of elements that the new list can initially store.</param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.DistributedSourceBoundaries.#ctor(System.Collections.Generic.IEnumerable{DHI.Mike1D.BoundaryModule.IDistributedSourceBoundary})">
            <summary>
            Initializes a new instance of the List class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.GlobalSourceBoundaries">
            <summary>
            Class implementing a list of IGlobalSourceBoundary's
            Required for generic list COM interop
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.GlobalSourceBoundaries.#ctor">
            <summary>
            Initializes a new instance of the List class that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.GlobalSourceBoundaries.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the List class that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of elements that the new list can initially store.</param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.GlobalSourceBoundaries.#ctor(System.Collections.Generic.IEnumerable{DHI.Mike1D.BoundaryModule.IGlobalSourceBoundary})">
            <summary>
            Initializes a new instance of the List class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.GlobalSourceApplicationTypes">
            <summary>
            Enumeration specifying where a global source is applied
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.GlobalSourceApplicationTypes.Default">
            <summary>
            Default or not applicable for this type of global boundary
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.GlobalSourceApplicationTypes.HD">
            <summary>
            Apply to HD only
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.GlobalSourceApplicationTypes.RR">
            <summary>
            Apply to RR/Catchments only
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.GlobalSourceApplicationTypes.HDRR">
            <summary>
            Apply to HD and RR/Catchments
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.GlobalSourceBoundary">
            <summary>
            A global source that contributes to the entire network
            
            A GeoPoint can be provided, and more than one source of 
            the same type is then valid. The closest source should then
            be used.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.GlobalSourceBoundary.BoundarySourceType">
            <summary>
            Type of boundary source, always returns GlobalSource
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.GlobalSourceBoundary.ApplicationType">
            <summary>
            Flag specifying where this boundary is applied
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.GlobalSourceBoundary.UseGeoLocatedSources">
            <inheritdoc />
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.GlobalSourceBoundary.GlobalSourceBoundaryType">
            <inheritdoc />
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.GlobalSourceBoundary.DistributedOverrides">
            <inheritdoc />
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.GlobalSourceBoundary.GeoLocatedSources">
            <inheritdoc />
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.GlobalSourceBoundary.GriddedSources">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.GlobalSourceBoundary.Validate(System.DateTime,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.GlobalSourceBoundary.ToString">
            <inheritdoc />
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.GlobalSourceBoundary.ExtensionData">
            <summary>
            Data from an extended DataContract not recognized here
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.IAdvancedBoundaryItem">
            <summary>
            An advanced boundary item adds functionality for scale factor, soft start (gradual start-up)
            and application interval to the standard <see cref="T:DHI.Mike1D.BoundaryModule.IBoundaryItem"/>
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IAdvancedBoundaryItem.ScaleFactor">
            <summary>
            A factor by which values are scaled. Default 1.0.
            <para>
            Only valid for certain item types, e.g., load/inflow types, 
            not for types like waterlevel.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IAdvancedBoundaryItem.SoftstartType">
            <summary>
            Type of softstart. Default none
            <para>
            Softstart does not make sense for all boundary types, typically only 
            for those that otherwise can be disabled/left out of the simulation.
            </para>
            Softstart starttime is <see cref="P:DHI.Mike1D.BoundaryModule.IAdvancedBoundaryItem.ApplicationBegin"/> which if not set explicitly is either
            <list type="bullet">
            <item>Globally: Simulation start time</item>
            <item>Locally: Item source start time (typically timeseries file start)</item>
            </list>
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IAdvancedBoundaryItem.SoftstartValue">
            <summary>
            Softstart initial value. Default 0.0
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IAdvancedBoundaryItem.SoftstartDuration">
            <summary>
            Duration of softstart period. Default 0 
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IAdvancedBoundaryItem.UseApplicationInterval">
            <summary>
            Boolean specifying whether the application of the item is limited in time
            <para>
            Set this flag if user specified values of <see cref="P:DHI.Mike1D.BoundaryModule.IAdvancedBoundaryItem.ApplicationBegin"/> and
            <see cref="P:DHI.Mike1D.BoundaryModule.IAdvancedBoundaryItem.ApplicationEnd"/> is to be used. If this flag is not set the application
            begin and end time will be overwritten/controlled by the Boundary Data,
            set in <see cref="M:DHI.Mike1D.BoundaryModule.BoundaryData.Prepare(System.DateTime,System.DateTime,DHI.Mike1D.Generic.IDiagnostics)"/> or by the individual boundary item.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IAdvancedBoundaryItem.ApplicationBegin">
            <summary>
            Start datetime of the application of the item.
            <para>
            If user specified values are set, remember also to set the <see cref="P:DHI.Mike1D.BoundaryModule.IAdvancedBoundaryItem.UseApplicationInterval"/>
            </para>
            <remarks>
            If <see cref="P:DHI.Mike1D.BoundaryModule.IAdvancedBoundaryItem.UseApplicationInterval"/> is false, this is set automatically during prepare phase to either
            <list type="bullet">
            <item>Globally: Simulation start time</item>
            <item>Locally: Item source start time (typically timeseries file start)</item>
            </list>
            </remarks>
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IAdvancedBoundaryItem.ApplicationEnd">
            <summary>
            End datetime of the application of the item
            <para>
            If user specified values are set, remember also to set the <see cref="P:DHI.Mike1D.BoundaryModule.IAdvancedBoundaryItem.UseApplicationInterval"/>
            </para>
            </summary>
            <remarks>
            If <see cref="P:DHI.Mike1D.BoundaryModule.IAdvancedBoundaryItem.UseApplicationInterval"/> is false, this is set automatically during prepare phase to either
            <list type="bullet">
            <item>Globally: Simulation end time</item>
            <item>Locally: Item source end time (typically timeseries file end)</item>
            </list>
            </remarks>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.IAbstractLocationSourceBoundary">
            <summary>
            Interface for an AbstractLocationSourceBoundary. Adding interfaces
            for point and node locations.
            
            To be extended.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IAbstractLocationSourceBoundary.PointLocations">
            <summary>
            A list of all PointLocations
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IAbstractLocationSourceBoundary.NodeLocations">
            <summary>
            A list of all NodeLocations
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IAbstractLocationSourceBoundary.SetScaleFactor(DHI.Mike1D.Generic.ILocation,System.Double,DHI.Mike1D.Generic.IDiagnostics)">
            <summary>
            Set the scale factor for a PointLocation. By default all scale factors
            are 1.0.
            </summary>
            <param name="pointLocation">Pointlocation to set scale factor</param>
            <param name="scaleFactor">Value of scalefactor</param>
            <param name="diagnostics"></param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IAbstractLocationSourceBoundary.SetScaleFactor(System.String,System.Double,DHI.Mike1D.Generic.IDiagnostics)">
            <summary>
            Set the scale factor for a NodeLocation. By default all scale factors
            are 1.0.
            </summary>
            <param name="nodeId">NodeId string</param>
            <param name="scaleFactor">Value of scalefactor</param>
            <param name="diagnostics"></param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IAbstractLocationSourceBoundary.GetScaleFactor(DHI.Mike1D.Generic.ILocation)">
            <summary>
            Get the scale factor for a given PointLocation
            </summary>
            <param name="pointLocation">PointLocation to get scale factor</param>
            <returns>The scalefactor. If not set explicitly, 1.0</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IAbstractLocationSourceBoundary.GetScaleFactor(System.String)">
            <summary>
            Get the scale factor for a given NodeLocation
            </summary>
            <param name="nodeId">NodeId string</param>
            <returns>The scalefactor. If not set explicitly, 1.0</returns>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.BoundaryItemTypes">
            <summary>
            Currently supported boundary item types.
            Each has its own class implementing its functionality.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.BoundaryItemTypes.Unknown">
            <summary>
            Unknown item type
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.BoundaryItemTypes.Constant">
            <summary>
            Constant
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.BoundaryItemTypes.Periodic">
            <summary>
            Periodic
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.BoundaryItemTypes.TimeSeries">
            <summary>
            Time series
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.BoundaryItemTypes.RainfallRunoffResults">
            <summary>
            Rainfall runoff results
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.IBoundaryItem">
            <summary>
            A general BoundaryItem interface.
            
            AbstractBoundaryItem provides a general implementation
            of IBoundaryItem.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IBoundaryItem.EumQuantity">
            <summary>
            EUM quantity of boundary item.
            <para>
            Used for validation and in AD also for unit conversion.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IBoundaryItem.GetValue(System.DateTime)">
            <summary>
            <para>
            Get boundary value at specified date/time.
            </para>
            <para>
            It is the callers responsibility to check if the
            item is applicable at the given datetime before
            calling GetValue.
            </para>
            </summary>
            <param name="dateTime">DateTime to get value</param>
            <returns>Boundary value in SI unit</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IBoundaryItem.GetAccumulatedValue(System.DateTime,System.DateTime)">
            <summary>
            <para>
            Get boundary value accumulated over the specified period.
            </para>
            <para>
            It is the callers responsibility to check if the
            item is applicable at the given datetime before
            calling GetAccumulatedValue.
            </para>
            <para>
            If the item is only applicable over a part of the interval,
            it must return the accumulated value for that part of the
            interval.
            </para>
            </summary>
            <returns>Boundary value in SI unit</returns>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IBoundaryItem.IsDryWeatherFlow">
            <summary>
            Boundary items can be marked as "dry weather flow" (used in MIKE URBAN). This is used in 
            Long Term Simulation to exclude dry weather flow from the total inflow when evaluating
            how to start a new LTS job (if selecting a new hot start file)
            <para>
            This flag has no effect on the simulation, only on LTS job evaluations.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IBoundaryItem.IsApplicable(System.DateTime)">
            <summary>
            Checks whether the item is applicable at the given datetime.
            </summary>
            <param name="datetime">DateTime to investigate</param>
            <returns>True if applicable, false otherwise</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IBoundaryItem.IsApplicable(System.DateTime,System.DateTime)">
            <summary>
            Checks whether the item is applicable at the given time interval.
            It returns true also if the item covers only a part of the 
            start-end interval
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IBoundaryItem.Validate">
            <summary>
            Validate this
            </summary>
            <returns>IDiagnostics with issues</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IBoundaryItem.Prepare(System.DateTime,System.DateTime,DHI.Mike1D.Generic.IDiagnostics)">
            <summary>
            Prepare item for simulation.
            </summary>
            <remarks>
            The simStart and simEnd are required for items with a relative time axis, and for
            applying the soft-start, setting the soft start start time, by setting the 
            <see cref="P:DHI.Mike1D.BoundaryModule.AbstractBoundaryItem.ApplicationBegin"/>
            (when the item does not have an application interval set)
            </remarks>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IBoundaryItem.GetNextTransitionTime(System.DateTime)">
            <summary>
            Gets the next time for which there is a different value in the boundary item.
            </summary>
            <param name="date">Date to start searching for a new value from. The date must be 
            within the application interval of the item, check <see cref="M:DHI.Mike1D.BoundaryModule.IBoundaryItem.IsApplicable(System.DateTime)"/> 
            before calling this</param>
            <returns>Time of the next new value</returns>
            <remarks>
            For unknown types of boundary items the default is to return
            the incoming date as the next transition time, indicating it is unknown
            if/when the next transition actually takes place. A boundaryitem can also
            return <see cref="F:System.DateTime.MaxValue"/>, indicating that the item never
            changes value.
            <para>
            Many types of items will return the incoming date as the result.
            </para>
            </remarks>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.IBoundaryAdaptive">
            <summary>
            Interface handling adaptive time step evaluation. Implemented by
            as well boundary items as boundary sources
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IBoundaryAdaptive.GetPreferredTimeStep(System.DateTime,System.TimeSpan,System.TimeSpan,System.Double,System.Double,System.Double)">
            <summary>
            Get preferred time step, which should not vary more than
            <paramref name="maxRelChange"/> within the given time step.
            </summary>
            <param name="start">Start time of time step</param>
            <param name="minDt">Smallest time step allowed</param>
            <param name="curDt">Current time step size</param>
            <param name="maxRelChange">Maximum relative change</param>
            <param name="cutoff">Cutoff value, for boundary values below this value, the variation is not checked for</param>
            <param name="referenceValue">Reference value, used by e.g. water level boundaries (usually bottom level)</param>
            <returns>Preferred time step, a value between <paramref name="minDt"/> and <paramref name="curDt"/></returns>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.IBoundaryData">
            <summary>
            This is the interface for the BoundaryData class
            
            Note: Needed for COM interop only - do not use from .Net
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IBoundaryData.TsBuffer">
            <summary>
            A buffer containing all timeseries, so they can be reused as much as possible.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IBoundaryData.Connection">
            <summary>
            Connection information for boundary data file.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IBoundaryData.OpenSourceBoundaries">
            <summary>
            Open source boundaries, source for all open ends of the network
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IBoundaryData.PointSourceBoundaries">
            <summary>
            Point source boundaries, sources for nodes and locations
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IBoundaryData.DistributedSourceBoundaries">
            <summary>
            Distributed source boundaries, sources for links and spans
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IBoundaryData.GlobalSourceBoundaries">
            <summary>
            Global source boundaries
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IBoundaryData.CatchmentSourceBoundaries">
            <summary>
            Catchment source boundaries, sources for catchment
            models, as e.g. rainfall and evaporation. These can be specified
            for each catchment individually here. If specifying rain etc. 
            globally or based on coordinates, used the <see cref="P:DHI.Mike1D.BoundaryModule.IBoundaryData.GlobalSourceBoundaries"/>.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IBoundaryData.StructureSourceBoundaries">
            <summary>
            Structure source boundaries, time series for various structures as
            e.g. dam breach time series
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IBoundaryData.GetGlobalSource(DHI.Mike1D.BoundaryModule.GlobalSourceBoundaryTypes)">
            <summary>
            Get a <see cref="T:DHI.Mike1D.BoundaryModule.IGlobalSourceBoundary"/> of the specified type
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IBoundaryData.Prepare(System.DateTime,System.DateTime,DHI.Mike1D.Generic.IDiagnostics)">
            <summary>
            Prepare the object for a simulation
            </summary>
            <param name="simStart">Start time of simulation</param>
            <param name="simEnd">End time of simulation</param>
            <param name="diagnostics">Error and warnings are returned here</param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IBoundaryData.Validate(System.DateTime,System.DateTime)">
            <summary>
            Validates the object
            </summary>
            <param name="simStart">Start time of simulation</param>
            <param name="simEnd">End time of simulation</param>
            <returns>An IDiagnostics containing errors, warning, and hints</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IBoundaryData.Save">
            <summary>
            Save the data to the file defined by the Connection
            
            File will be overwritten if it already exists.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IBoundaryData.Append(DHI.Mike1D.Generic.IConnection)">
            <summary>
            Append data from another file defined by its connection
            to the current Boundary data object
            </summary>
            <param name="connection">Connection info for new file</param>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.IBoundaryItemConstant">
            <summary>
            Interface for a constant boundary item
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IBoundaryItemConstant.ConstValue">
            <summary>
            Setter access for the constant value. Use GetValue to retrieve it.
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.IBoundaryWithComponents">
            <summary>
            Interface for boundaries with components
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IBoundaryWithComponents.Components">
            <summary>
            A list of all components sources attached to the source. Each component may include more than
            one entry in this list.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IBoundaryWithComponents.GetValue(System.Int32,System.DateTime)">
            <summary>
            Get value for component at given at the given time
            </summary>
            <param name="boundarySourceComponentIndex">Index into <see cref="P:DHI.Mike1D.BoundaryModule.IBoundaryWithComponents.Components"/></param>
            <param name="date">DateTime to get value</param>
            <returns>Value</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IBoundaryWithComponents.GetAccumulatedValue(System.Int32,System.DateTime,System.DateTime)">
            <summary>
            Get accumulated value for component at given index at the given time span
            </summary>
            <returns>Value</returns>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.IBoundarySource">
            <summary>
            Base interface for all BoundarySources
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IBoundarySource.BoundaryID">
            <summary>
            ID of boundary. Used for searching and connecting sources and items, when required. Not used by the engine.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IBoundarySource.GetValue(System.DateTime)">
            <summary>
            Get value for this source at the given time
            </summary>
            <param name="date">DateTime to get value</param>
            <returns>Value</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IBoundarySource.GetValueWithoutDWF(System.DateTime)">
            <summary>
            Get value for this source at the given time excluding items marked as dry weather flow
            </summary>
            <param name="date">DateTime to get value</param>
            <returns>Value</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IBoundarySource.GetAccumulatedValue(System.DateTime,System.DateTime)">
            <summary>
            Get accumulated value for this source at the given time span
            </summary>
            <returns>Value</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IBoundarySource.GetNextTransitionTime(System.DateTime)">
            <summary>
            Gets the next time for which there is a different value in the boundary source.
            </summary>
            <param name="date">Date to start searching for a new value from</param>
            <returns>Time of the next new value</returns>
            <remarks>
            The default implementation is to query all the boundary items of the boundary source. 
            For unknown types of boundary items the default is to return
            the incoming date as the next transition time, indicating it is unknown
            if/when the next transition actually takes place. A boundary item can also
            return <see cref="F:System.DateTime.MaxValue"/>, indicating that the item never
            changes value.
            </remarks>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IBoundarySource.Validate(System.DateTime,System.DateTime)">
            <summary>
            Validate whether this source is correctly setup
            </summary>
            <returns>IDiagnostics with issues from this component only</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IBoundarySource.Prepare(System.DateTime,System.DateTime,DHI.Mike1D.Generic.IDiagnostics)">
            <summary>
            Prepare source.
            </summary>
            <param name="simStart">Start time of simulation.</param>
            <param name="simEnd">End time of simulation.</param>
            <param name="diagnostics">Diagnostics to report errors and warnings to.</param>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IBoundarySource.Modifier">
            <summary>
            A modifier that you can assign run-time to the setup, to handle 
            e.g. putting noise to the model or in other ways change the value.
            <para>
            Default is null
            </para>
            <para>
            The value is provided in the engine unit and must be returned in the engine unit.
            </para>
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.ICatchmentSourceBoundaries">
            <summary>
            Interface for a list of <see cref="T:DHI.Mike1D.BoundaryModule.ICatchmentSourceBoundary"/>'s
            Required for generic list COM interop
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.ICatchmentSourceBoundaries.Add(DHI.Mike1D.BoundaryModule.ICatchmentSourceBoundary)">
            <summary>
            Add a <see cref="T:DHI.Mike1D.BoundaryModule.ICatchmentSourceBoundary"/> to the list
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.ICatchmentSourceBoundaries.Item(System.Int32)">
            <summary>
            Get or set the <see cref="T:DHI.Mike1D.BoundaryModule.ICatchmentSourceBoundary"/> at the specified index in the list
            </summary>
            <param name="index">Index in list</param>
            <returns><see cref="T:DHI.Mike1D.BoundaryModule.ICatchmentSourceBoundary"/> at the index</returns>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.ICatchmentSourceBoundaries.Count">
            <summary>
            The number of <see cref="T:DHI.Mike1D.BoundaryModule.ICatchmentSourceBoundary"/>'s in the list
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.ICatchmentSourceBoundaries.IndexOf(DHI.Mike1D.BoundaryModule.ICatchmentSourceBoundary)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire List. 
            </summary>
            <param name="item">The object to locate in the List. The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within the entire List, if found; otherwise, –1. </returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.ICatchmentSourceBoundaries.Find(System.Predicate{DHI.Mike1D.BoundaryModule.ICatchmentSourceBoundary})">
            <summary>
            Searches for an element that matches the conditions defined by 
            the specified predicate, and returns the first occurrence within 
            the entire List. 
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type ICatchmentSourceBoundary. </returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.ICatchmentSourceBoundaries.FindAll(System.Predicate{DHI.Mike1D.BoundaryModule.ICatchmentSourceBoundary})">
            <summary>
            Searches for an element that matches the conditions defined by 
            the specified predicate, and returns a list of all matches
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type ICatchmentSourceBoundary. </returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.ICatchmentSourceBoundaries.Remove(DHI.Mike1D.BoundaryModule.ICatchmentSourceBoundary)">
            <summary>
            Removes the first occurrence of a specific object from the List. 
            </summary>
            <param name="item">The object to remove from the List. The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <returns>true if item is successfully removed; otherwise, false. This method also returns false if item was not found in the List. </returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.ICatchmentSourceBoundaries.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the List. 
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <remarks>This method is an O(n) operation</remarks>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.ICatchmentSourceBoundaries.Clear">
            <summary>
            Removes all elements from the List.
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.CatchmentSourceBoundaryTypes">
            <summary>
            Type of Catchmentsource boundary
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.CatchmentSourceBoundaryTypes.Rainfall">
            <summary>
            Rain
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.CatchmentSourceBoundaryTypes.Evaporation">
            <summary>
            Evaporation
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.CatchmentSourceBoundaryTypes.Discharge">
            <summary>
            Discharge
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.CatchmentSourceBoundaryTypes.DischargePerPerson">
            <summary>
            Discharge per person
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.CatchmentSourceBoundaryTypes.DischargePerArea">
            <summary>
            Discharge per Area
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.CatchmentSourceBoundaryTypes.Temperature">
            <summary>
            Temperature
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.CatchmentSourceBoundaryTypes.Irrigation">
            <summary>
            Irrigation
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.CatchmentSourceBoundaryTypes.Abstraction">
            <summary>
            Abstraction
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.CatchmentSourceBoundaryTypes.Radiation">
            <summary>
            Radiation
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.CatchmentSourceBoundaryTypes.DayCoefficient">
            <summary>
            Day Coefficient
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.CatchmentSourceBoundaryTypes.Component">
            <summary>
            Component boundary, providing component concentrations
            for water being released from catchment into network.
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.ICatchmentSourceBoundary">
            <summary>
            Interface for a CatchmentSourceBoundary. Interfaces
            for Cathcment ID and scalefactors.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.ICatchmentSourceBoundary.CatchmentSourceBoundaryType">
            <summary>
            CatchmentSource Type - currently only Discharge is implemented
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.ICatchmentSourceBoundary.CatchmentIds">
            <summary>
            A list of all Catchment ID's associated with this Source. It can be empty, then
            the source is assumed to be globally valid.
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.IDistributedSourceBoundaries">
            <summary>
            Interface for a list of <see cref="T:DHI.Mike1D.BoundaryModule.IDistributedSourceBoundary"/>'s
            Required for generic list COM interop
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IDistributedSourceBoundaries.Add(DHI.Mike1D.BoundaryModule.IDistributedSourceBoundary)">
            <summary>
            Add a <see cref="T:DHI.Mike1D.BoundaryModule.IDistributedSourceBoundary"/> to the list
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IDistributedSourceBoundaries.Item(System.Int32)">
            <summary>
            Get or set the <see cref="T:DHI.Mike1D.BoundaryModule.IDistributedSourceBoundary"/> at the specified index in the list
            </summary>
            <param name="index">Index in list</param>
            <returns><see cref="T:DHI.Mike1D.BoundaryModule.IDistributedSourceBoundary"/> at the index</returns>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IDistributedSourceBoundaries.Count">
            <summary>
            The number of <see cref="T:DHI.Mike1D.BoundaryModule.IDistributedSourceBoundary"/>'s in the list
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IDistributedSourceBoundaries.IndexOf(DHI.Mike1D.BoundaryModule.IDistributedSourceBoundary)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire List. 
            </summary>
            <param name="item">The object to locate in the List. The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within the entire List, if found; otherwise, –1. </returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IDistributedSourceBoundaries.Find(System.Predicate{DHI.Mike1D.BoundaryModule.IDistributedSourceBoundary})">
            <summary>
            Searches for an element that matches the conditions defined by 
            the specified predicate, and returns the first occurrence within 
            the entire List. 
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type IDistributedSourceBoundary. </returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IDistributedSourceBoundaries.Remove(DHI.Mike1D.BoundaryModule.IDistributedSourceBoundary)">
            <summary>
            Removes the first occurrence of a specific object from the List. 
            </summary>
            <param name="item">The object to remove from the List. The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <returns>true if item is successfully removed; otherwise, false. This method also returns false if item was not found in the List. </returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IDistributedSourceBoundaries.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the List. 
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <remarks>This method is an O(n) operation</remarks>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IDistributedSourceBoundaries.Clear">
            <summary>
            Removes all elements from the List.
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.TypeOfDistribution">
            <summary>
            Defines how a distributed source distributes its source value.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.TypeOfDistribution.TotalValue">
            <summary>
            The value of the source is distributed such that the total amount of
            source added on all spans/links sum up to the source value. Each
            link/span contribution is weighted using the length of the span/link.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.TypeOfDistribution.ValuePerLength">
            <summary>
            The value of the source is per unit length, and will be multiplied
            by the length of the span.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.TypeOfDistribution.ValuePerArea">
            <summary>
            The value of the source is per unit (surface) area, and will be multiplied
            by the surface area covered by the span.
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.DistributedSourceBoundaryTypes">
            <summary>
            Type of distributed source inflow
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.DistributedSourceBoundaryTypes.Inflow">
            <summary> Standard inflow </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.DistributedSourceBoundaryTypes.RainfallRunoffInflow">
            <summary> Inflow is from surface/rainfall runoff </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.DistributedSourceBoundaryTypes.Rainfall">
            <summary> Rainfall. Only applicable for distributed overrides in global boundary </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.DistributedSourceBoundaryTypes.Evaporation">
            <summary> Evaporation. Only applicable for distributed overrides in global boundary </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.DistributedSourceBoundaryTypes.WindField">
            <summary> Wind field. Only applicable for distributed overrides in global boundary </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.DistributedSourceBoundaryTypes.HeatBalance">
            <summary> Heat balance. . Not supported </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.DistributedSourceBoundaryTypes.ResistanceFactor">
            <summary> Resistance factor. Only applicable for distributed overrides in global boundary  </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.DistributedSourceBoundaryTypes.GroundWaterLeakage">
            <summary> Ground water leakage. Not supported </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.DistributedSourceBoundaryTypes.Exfiltration">
            <summary> Water exfiltration from link </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.IDistributedSourceBoundary">
            <summary>
            Interface for a DistributedSourceBoundary
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IDistributedSourceBoundary.DistributedSourceType">
            <summary>
            Type of DistributedSource
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IDistributedSourceBoundary.DistributionType">
            <summary>
            How the value of the source is distributed along the location spans/links
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IDistributedSourceBoundary.LocationSpans">
            <summary>
            A list of all LocationSpans
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IDistributedSourceBoundary.LinkIds">
            <summary>
            A list of all LinkIds
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IDistributedSourceBoundary.SetScaleFactor(DHI.Mike1D.Generic.ILocationSpan,System.Double)">
            <summary>
            Set scale factor for location span
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IDistributedSourceBoundary.SetScaleFactor(System.String,System.Double)">
            <summary>
            Set scale factor for link (reach id)
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IDistributedSourceBoundary.GetScaleFactor(DHI.Mike1D.Generic.ILocationSpan)">
            <summary>
            Get scale factor for location span
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IDistributedSourceBoundary.GetScaleFactor(System.String)">
            <summary>
            Get scale factor for link (reach id)
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.AbstractLocationSourceBoundary">
             <summary>
             Class containing common code for locations for a source, 
             which can contain as well a point locations as a node locations.
             
             It also handles the individual scalefactor that each location
             can have.
            
             </summary>
             <remarks>
             Be aware that the scalefactors are saved in a Dictionary, and is not intended
             to be retrieved from here a large number of times.
             </remarks> 
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.AbstractLocationSourceBoundary.PointLocations">
            <summary>
            A list of all PointLocations
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.AbstractLocationSourceBoundary.NodeLocations">
            <summary>
            A list of all NodeLocations
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.AbstractLocationSourceBoundary.SetScaleFactor(DHI.Mike1D.Generic.ILocation,System.Double,DHI.Mike1D.Generic.IDiagnostics)">
            <summary>
            Set the scale factor for a PointLocation. By default all scale factors
            are 1.0.
            </summary>
            <param name="pointLocation">Pointlocation to set scale factor</param>
            <param name="scaleFactor">Value of scalefactor</param>
            <param name="diagnostics"></param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.AbstractLocationSourceBoundary.SetScaleFactor(System.String,System.Double,DHI.Mike1D.Generic.IDiagnostics)">
            <summary>
            Set the scale factor for a NodeLocation. By default all scale factors
            are 1.0.
            </summary>
            <param name="nodeId">NodeId string</param>
            <param name="scaleFactor">Value of scalefactor</param>
            <param name="diagnostics"></param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.AbstractLocationSourceBoundary.GetScaleFactor(DHI.Mike1D.Generic.ILocation)">
            <summary>
            Get the scale factor for a given PointLocation
            </summary>
            <param name="pointLocation">PointLocation to get scale factor</param>
            <returns>The scalefactor. If not set explicitly, 1.0</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.AbstractLocationSourceBoundary.GetScaleFactor(System.String)">
            <summary>
            Get the scale factor for a given NodeLocation
            </summary>
            <param name="nodeId">NodeId string</param>
            <returns>The scalefactor. If not set explicitly, 1.0</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.AbstractLocationSourceBoundary.ValidateLocations(DHI.Mike1D.Generic.IDiagnostics)">
            <summary>
            Validate locations and scalefactors
            </summary>
            <param name="diagnostics">IDiagnostics to put issues into</param>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.IGlobalSourceBoundaries">
            <summary>
            Interface for a list of <see cref="T:DHI.Mike1D.BoundaryModule.IGlobalSourceBoundary"/>'s
            Required for generic list COM interop
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IGlobalSourceBoundaries.Add(DHI.Mike1D.BoundaryModule.IGlobalSourceBoundary)">
            <summary>
            Add a <see cref="T:DHI.Mike1D.BoundaryModule.IGlobalSourceBoundary"/> to the list
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IGlobalSourceBoundaries.Item(System.Int32)">
            <summary>
            Get or set the <see cref="T:DHI.Mike1D.BoundaryModule.IGlobalSourceBoundary"/> at the specified index in the list
            </summary>
            <param name="index">Index in list</param>
            <returns><see cref="T:DHI.Mike1D.BoundaryModule.IGlobalSourceBoundary"/> at the index</returns>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IGlobalSourceBoundaries.Count">
            <summary>
            The number of <see cref="T:DHI.Mike1D.BoundaryModule.IGlobalSourceBoundary"/>'s in the list
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IGlobalSourceBoundaries.IndexOf(DHI.Mike1D.BoundaryModule.IGlobalSourceBoundary)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire List. 
            </summary>
            <param name="item">The object to locate in the List. The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within the entire List, if found; otherwise, –1. </returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IGlobalSourceBoundaries.Find(System.Predicate{DHI.Mike1D.BoundaryModule.IGlobalSourceBoundary})">
            <summary>
            Searches for an element that matches the conditions defined by 
            the specified predicate, and returns the first occurrence within 
            the entire List. 
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type IGlobalSourceBoundary. </returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IGlobalSourceBoundaries.Remove(DHI.Mike1D.BoundaryModule.IGlobalSourceBoundary)">
            <summary>
            Removes the first occurrence of a specific object from the List. 
            </summary>
            <param name="item">The object to remove from the List. The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <returns>true if item is successfully removed; otherwise, false. This method also returns false if item was not found in the List. </returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IGlobalSourceBoundaries.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the List. 
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <remarks>This method is an O(n) operation</remarks>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IGlobalSourceBoundaries.Clear">
            <summary>
            Removes all elements from the List.
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.GlobalSourceBoundaryTypes">
            <summary>
            Type of global source boundaries.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.GlobalSourceBoundaryTypes.EUFunction">
            <summary>
            TODO: comment. Possibly remove
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.GlobalSourceBoundaryTypes.Rainfall">
            <summary>
            Rainfall.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.GlobalSourceBoundaryTypes.Evaporation">
            <summary>
            Evaporation.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.GlobalSourceBoundaryTypes.WindField">
            <summary>
            Windfield.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.GlobalSourceBoundaryTypes.HeatBalance">
            <summary>
            Heat balance. TODO: Remove? add in ecolab component or similar
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.GlobalSourceBoundaryTypes.ResistanceFactor">
            <summary>
            Resistence factor.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.GlobalSourceBoundaryTypes.GroundWaterHead">
            <summary>
            Groundwater head.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.GlobalSourceBoundaryTypes.Temperature">
            <summary>
            Groundwater head.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.GlobalSourceBoundaryTypes.CatchmentDischarge">
            <summary>
            Catchment discharge.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.GlobalSourceBoundaryTypes.CatchmentDischargePerArea">
            <summary>
            Catchment discharge per area.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.GlobalSourceBoundaryTypes.CatchmentDischargePerPerson">
            <summary>
            Catchment discharge per person
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.GlobalSourceBoundaryTypes.Abstraction">
            <summary>
            Abstraction.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.GlobalSourceBoundaryTypes.GroundWaterLeakage">
            <summary>
            Ground water leakage
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.IGlobalSourceBoundary">
            <summary>
            Interface for a GlobalSourceBoundary.
            <para>
            A global source boundary consist of a number of items
            that are geographically located, stored in the
            <see cref="P:DHI.Mike1D.BoundaryModule.IGlobalSourceBoundary.GeoLocatedSources"/> list. If there is only one
            global item, it must be the first one, and then the <see cref="P:DHI.Mike1D.BoundaryModule.IGlobalSourceBoundary.GeoLocatedSources"/>
            needs not have a geo-point, <see cref="P:DHI.Mike1D.BoundaryModule.GlobalGeoLocatedSource.GeoPoint"/>,
            and <see cref="P:DHI.Mike1D.BoundaryModule.IGlobalSourceBoundary.UseGeoLocatedSources"/> must return false. If <see cref="P:DHI.Mike1D.BoundaryModule.IGlobalSourceBoundary.UseGeoLocatedSources"/>
            returns false, the first item in the <see cref="P:DHI.Mike1D.BoundaryModule.IGlobalSourceBoundary.GeoLocatedSources"/> is used.
            </para>
            <para>
            To get the value at a given location, it is up to the user/engine whether 
            to take the closest geo-located item, to interpolate in them or do something else.
            </para>
            <para>
            You can define a number of items that overrides the global value at certain
            areas in the network, these are stored in the <see cref="P:DHI.Mike1D.BoundaryModule.IGlobalSourceBoundary.DistributedOverrides"/>
            list, that each are an <see cref="T:DHI.Mike1D.BoundaryModule.IDistributedSourceBoundary"/>.
            </para>
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IGlobalSourceBoundary.GlobalSourceBoundaryType">
            <summary>
            Type of Global source boundary.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IGlobalSourceBoundary.ApplicationType">
            <summary>
            Flag specifying where this boundary is applied.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IGlobalSourceBoundary.GeoLocatedSources">
            <summary>
            List of Geo Located Items.
            It is allowed not to set the Geo Point only if the list contains one item.
            If the list contains more than one item, it is required that all
            Geo Located Items have a valid Geo Point, otherwise an error message will be
            thrown.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IGlobalSourceBoundary.DistributedOverrides">
            <summary>
            List of distributed boundaries that overrides the global value
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IGlobalSourceBoundary.GriddedSources">
            <summary>
            List of gridded sources.
            <para>
            In case of overlap of grids, the order in the list is determining priority.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IGlobalSourceBoundary.Validate(System.DateTime,System.DateTime)">
            <summary>
            Validate whether this source is correctly setup
            </summary>
            <returns>IDiagnostics with issues from this component only</returns>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IGlobalSourceBoundary.UseGeoLocatedSources">
            <summary>
            True if the global boudary has to use the geo located items or not.
            False by default.
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.IListIBoundaryItems">
            <summary>
            Interface for a list of <see cref="T:DHI.Mike1D.BoundaryModule.IBoundaryItem"/>'s
            Required for generic list COM interop
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IListIBoundaryItems.Add(DHI.Mike1D.BoundaryModule.IBoundaryItem)">
            <summary>
            Add a <see cref="T:DHI.Mike1D.BoundaryModule.IBoundaryItem"/> to the list
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IListIBoundaryItems.Item(System.Int32)">
            <summary>
            Get or set the <see cref="T:DHI.Mike1D.BoundaryModule.IBoundaryItem"/> at the specified index in the list
            </summary>
            <param name="index">Index in list</param>
            <returns><see cref="T:DHI.Mike1D.BoundaryModule.IBoundaryItem"/> at the index</returns>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IListIBoundaryItems.Count">
            <summary>
            The number of <see cref="T:DHI.Mike1D.BoundaryModule.IBoundaryItem"/>'s in the list
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IListIBoundaryItems.IndexOf(DHI.Mike1D.BoundaryModule.IBoundaryItem)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire List. 
            </summary>
            <param name="item">The object to locate in the List. The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within the entire List, if found; otherwise, –1. </returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IListIBoundaryItems.Find(System.Predicate{DHI.Mike1D.BoundaryModule.IBoundaryItem})">
            <summary>
            Searches for an element that matches the conditions defined by 
            the specified predicate, and returns the first occurrence within 
            the entire List. 
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type IBoundaryItem. </returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IListIBoundaryItems.Remove(DHI.Mike1D.BoundaryModule.IBoundaryItem)">
            <summary>
            Removes the first occurrence of a specific object from the List. 
            </summary>
            <param name="item">The object to remove from the List. The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <returns>true if item is successfully removed; otherwise, false. This method also returns false if item was not found in the List. </returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IListIBoundaryItems.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the List. 
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <remarks>This method is an O(n) operation</remarks>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IListIBoundaryItems.Clear">
            <summary>
            Removes all elements from the List.
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.IOpenSourceBoundaries">
            <summary>
            Interface for a list of <see cref="T:DHI.Mike1D.BoundaryModule.IOpenSourceBoundary"/>'s
            Required for generic list COM interop
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IOpenSourceBoundaries.Add(DHI.Mike1D.BoundaryModule.IOpenSourceBoundary)">
            <summary>
            Add a <see cref="T:DHI.Mike1D.BoundaryModule.IOpenSourceBoundary"/> to the list
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IOpenSourceBoundaries.Item(System.Int32)">
            <summary>
            Get or set the <see cref="T:DHI.Mike1D.BoundaryModule.IOpenSourceBoundary"/> at the specified index in the list
            </summary>
            <param name="index">Index in list</param>
            <returns><see cref="T:DHI.Mike1D.BoundaryModule.IOpenSourceBoundary"/> at the index</returns>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IOpenSourceBoundaries.Count">
            <summary>
            The number of <see cref="T:DHI.Mike1D.BoundaryModule.IOpenSourceBoundary"/>'s in the list
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IOpenSourceBoundaries.IndexOf(DHI.Mike1D.BoundaryModule.IOpenSourceBoundary)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire List. 
            </summary>
            <param name="item">The object to locate in the List. The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within the entire List, if found; otherwise, –1. </returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IOpenSourceBoundaries.Find(System.Predicate{DHI.Mike1D.BoundaryModule.IOpenSourceBoundary})">
            <summary>
            Searches for an element that matches the conditions defined by 
            the specified predicate, and returns the first occurrence within 
            the entire List. 
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type IOpenSourceBoundary. </returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IOpenSourceBoundaries.Remove(DHI.Mike1D.BoundaryModule.IOpenSourceBoundary)">
            <summary>
            Removes the first occurrence of a specific object from the List. 
            </summary>
            <param name="item">The object to remove from the List. The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <returns>true if item is successfully removed; otherwise, false. This method also returns false if item was not found in the List. </returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IOpenSourceBoundaries.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the List. 
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <remarks>This method is an O(n) operation</remarks>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IOpenSourceBoundaries.Clear">
            <summary>
            Removes all elements from the List.
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.IOpenSourceBoundary">
            <summary>
            Interface to a OpenSourceBoundary
            Note: Needed for COM interop only - do not use from .Net
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IOpenSourceBoundary.OpenSourceBoundaryType">
            <summary>
            Type of OpenSourceBoundary
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IOpenSourceBoundary.FlushFromBoundary">
            <summary>
            If true, at water level boundaries, the initial boundary water level will be "flushed"
            into the model as far as possible, and used as boundary conditions.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IOpenSourceBoundary.UseMixing">
            <summary>
            If true, then the AD module uses mixing when calculating boundary concentration in case of flow reversal at the boundary.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IOpenSourceBoundary.MixHalvingTime">
            <summary>
            MixHalvingTime is time constant used to calculate boundary concentration mixing in 
            case of flow reversal at the boundary,
            <para>
            It specifies the the time it takes to half the influence of a previous outflow.
            </para>
            <para>
            A value of zero is undefined, and will disable mixing.
            </para>
            <para>
            Default value: 3600.
            Unit: [s]
            </para>
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.IPointSourceBoundaries">
            <summary>
            Interface for a list of <see cref="T:DHI.Mike1D.BoundaryModule.IPointSourceBoundary"/>'s
            Required for generic list COM interop
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IPointSourceBoundaries.Add(DHI.Mike1D.BoundaryModule.IPointSourceBoundary)">
            <summary>
            Add a <see cref="T:DHI.Mike1D.BoundaryModule.IPointSourceBoundary"/> to the list
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IPointSourceBoundaries.Item(System.Int32)">
            <summary>
            Get or set the <see cref="T:DHI.Mike1D.BoundaryModule.IPointSourceBoundary"/> at the specified index in the list
            </summary>
            <param name="index">Index in list</param>
            <returns><see cref="T:DHI.Mike1D.BoundaryModule.IPointSourceBoundary"/> at the index</returns>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IPointSourceBoundaries.Count">
            <summary>
            The number of <see cref="T:DHI.Mike1D.BoundaryModule.IPointSourceBoundary"/>'s in the list
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IPointSourceBoundaries.IndexOf(DHI.Mike1D.BoundaryModule.IPointSourceBoundary)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first occurrence within the entire List. 
            </summary>
            <param name="item">The object to locate in the List. The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within the entire List, if found; otherwise, –1. </returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IPointSourceBoundaries.Find(System.Predicate{DHI.Mike1D.BoundaryModule.IPointSourceBoundary})">
            <summary>
            Searches for an element that matches the conditions defined by 
            the specified predicate, and returns the first occurrence within 
            the entire List. 
            </summary>
            <param name="match">The Predicate delegate that defines the conditions of the element to search for.</param>
            <returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type IPointSourceBoundary. </returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IPointSourceBoundaries.Remove(DHI.Mike1D.BoundaryModule.IPointSourceBoundary)">
            <summary>
            Removes the first occurrence of a specific object from the List. 
            </summary>
            <param name="item">The object to remove from the List. The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <returns>true if item is successfully removed; otherwise, false. This method also returns false if item was not found in the List. </returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IPointSourceBoundaries.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the List. 
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <remarks>This method is an O(n) operation</remarks>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IPointSourceBoundaries.Clear">
            <summary>
            Removes all elements from the List.
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.IPointSourceBoundary">
            <summary>
            Interface to a PointSourceBoundary
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IPointSourceBoundary.PointSourceType">
            <summary>
            Type of point source boundary
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.IPointSourceBoundary.PointSourceBoundaryInflowType">
            <summary>
            Type of inflow
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.ListIBoundaryItems">
            <summary>
            Class implementing a list of IBoundaryItem's
            Required for generic list COM interop
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.ListIBoundaryItems.#ctor">
            <summary>
            Initializes a new instance of the List class that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.ListIBoundaryItems.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the List class that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of elements that the new list can initially store.</param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.ListIBoundaryItems.#ctor(System.Collections.Generic.IEnumerable{DHI.Mike1D.BoundaryModule.IBoundaryItem})">
            <summary>
            Initializes a new instance of the List class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.BoundarySourceTypes">
            <summary>
            Types of Boundary sources
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.BoundarySourceTypes.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.BoundarySourceTypes.Closed">
            <summary>
            Closed boundary. When an external boundary is closed, no boundary condition is required. It matches a zero-flow boundary condition.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.BoundarySourceTypes.OpenSource">
            <summary>
            Open boundary. Defines the external boundaries of the model.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.BoundarySourceTypes.PointSource">
            <summary>
            A source discharging water in a single point, being either a node or a location.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.BoundarySourceTypes.DistributedSource">
            <summary>
            A distributed source ads its content (discharges water) over a location span or an entire reach.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.BoundarySourceTypes.GlobalSource">
            <summary>
            Global source, works over the entire network or for all catchments, as e.g. rain, evaporation.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.BoundarySourceTypes.CatchmentSource">
            <summary>
            A catchment source, inputs to catchments, as e.g. rain, evaporation.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.BoundarySourceTypes.Structure">
            <summary>
            Structure source, inputs to sources, as e.g. time series of dam breach development.
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.IBoundaryValueModifier">
            <summary>
            Generic interface for modifying boundary values on the fly.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.IBoundaryValueModifier.Modify(System.Double,System.DateTime)">
            <summary>
            Modify the value of the boundary.
            <para>
            The value is provided in the engine unit and must be returned in the engine unit.
            </para>
            </summary>
            <param name="val">Value to modify</param>
            <param name="time">Time in simulation</param>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary">
            <summary>
            Many common tasks for an IBoundarySource are handled by the AbstractSourceBoundary. 
            All MIKE 1D boundary sources extent from this. Current subclasses include 
            <list type="bullet">
            <item><see cref="T:DHI.Mike1D.BoundaryModule.OpenSourceBoundary"/></item>
            <item><see cref="T:DHI.Mike1D.BoundaryModule.PointSourceBoundary"/></item>
            <item><see cref="T:DHI.Mike1D.BoundaryModule.DistributedSourceBoundary"/></item>
            <item><see cref="T:DHI.Mike1D.BoundaryModule.GlobalGeoLocatedSource"/></item>
            <item><see cref="T:DHI.Mike1D.BoundaryModule.StructureSourceBoundary"/></item>
            <item><see cref="T:DHI.Mike1D.BoundaryModule.CatchmentSourceBoundary"/></item>
            <item><see cref="T:DHI.Mike1D.BoundaryModule.CatchmentComponentSourceBoundary"/></item>
            </list>
            <para>
            The AbstractSourceBoundary has a list of boundary items, <see cref="P:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary.Items"/>
            </para>
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary.BoundaryID">
            <summary>
            ID of boundary
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary._boundaryID">
            <summary> See <see cref="P:DHI.Mike1D.BoundaryModule.IBoundarySource.BoundaryID"/> </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary.Items">
            <summary>
            A list of all items attached to the source
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary._iItems">
            <summary>
            A list of all items attached to the source
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary.Components">
            <summary>
            A list of all components sources attached to the source. Each component may have more than
            one entry in this list. 
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary.BoundarySourceType">
            <summary>
            Returns the boundary source type of the boundary
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary.Modifier">
            <summary>
            A modifier that you can assign run-time to the setup, to handle 
            e.g. putting noise to the model or in other ways change the value.
            <para>
            Default is null
            </para>
            <para>
            The value is provided in the engine unit and must be returned in the engine unit.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary.TryModify(System.Double,System.DateTime)">
            <summary>
            Try modify boundary value, if <see cref="P:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary.Modifier"/> is not null
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary.TryModify(DHI.Mike1D.BoundaryModule.BoundarySourceComponent,System.Double,System.DateTime)">
            <summary>
            Try modify boundary value, if <see cref="P:DHI.Mike1D.BoundaryModule.BoundarySourceComponent.Modifier"/> is not null
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary.GetValue(System.DateTime)">
            <summary>
            Get value for this source
            </summary>
            <param name="date">DateTime to get value</param>
            <returns>Value</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary.GetValueWithoutDWF(System.DateTime)">
            <summary>
            Get value for this source without items marked as dry weather flow
            </summary>
            <param name="date">DateTime to get value</param>
            <returns>Value</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary.GetAccumulatedValue(System.DateTime,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary.GetValue(System.Int32,System.DateTime)">
            <summary>
            Get value of the component in the boundary on the provided index.
            <para>
            The index is NOT into global index of AD components.
            </para>
            </summary>
            <param name="boundarySourceComponentIndex">Index into list of boundary component sources</param>
            <param name="date">Date/time to get value for</param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary.GetAccumulatedValue(System.Int32,System.DateTime,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary.CalculateVariation(System.DateTime,System.DateTime,System.Double@)">
            <summary>
            Calculate variation (as difference from linear interpolation between start and end)
            <para>
            This method estimates the variation by checking values at 3 intermediate points
            within the interval.
            </para>
            <para>
            Since this looks up in the time series 5 times, there may be performance
            issues with this, so use with care.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary.GetNextTransitionTime(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary.GetNextComponentTransitionTime(System.DateTime)">
            <summary>
            Gets the next time for which there is a different value in the component boundary source.
            </summary>
            <param name="date">Date to start searching for a new value from</param>
            <returns>Time of the next new value</returns>
            <remarks>
            The default implementation is to query all the boundary items of the boundary source. 
            For unknown types of boundary items the default is to return
            the incoming date as the next transition time, indicating it is unknown
            if/when the next transition actually takes place. A boundaryitem can also
            return <see cref="F:System.DateTime.MaxValue"/>, indicating that the item never
            changes value.
            </remarks>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary.Validate(System.DateTime,System.DateTime)">
            <summary>
            Validate whether this source is correctly setup
             </summary>
            <remarks>
            Each implementor needs to validate the applicationInterval of its items
            </remarks>
            <returns>IDiagnostics with issues from this component only</returns>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary.DataMissing">
            <summary>
            Enum defining if source is missing data within simulation period, 
            see <see cref="M:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary.ValidateItemsInSimTime(DHI.Mike1D.BoundaryModule.IListIBoundaryItems,System.DateTime,System.DateTime,System.DateTime@)"/>
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary.DataMissing.Unknown">
            <summary> Unknown or not evaluated </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary.DataMissing.OK">
            <summary> Data is available </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary.DataMissing.Start">
            <summary> Data is missing at the start of the simulation period </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary.DataMissing.Middle">
            <summary> Data is missing in the middle of the simulation period </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary.DataMissing.End">
            <summary> Data is missing in the end of the simulation period </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary.ValidateItemsInSimTime(DHI.Mike1D.BoundaryModule.IListIBoundaryItems,System.DateTime,System.DateTime,System.DateTime@)">
            <summary>
            Validate that the source has boundary items covering from start to end time.
            <para>
            Returns the type of data missing. In case of Start, the <paramref name="firstMiss"/> will
            contain the start time of the data in the source. In case of Middle and End, the <paramref name="firstMiss"/>
            will contain the time of the first missing data.
            </para>
            <para>
            In case <paramref name="simStart"/> is <see cref="F:System.DateTime.MinValue"/> or 
            <paramref name="simEnd"/> is <see cref="F:System.DateTime.MaxValue"/>, no validation will 
            take place and <see cref="F:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary.DataMissing.Unknown"/> will be returned.
            </para>
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary.Prepare(System.DateTime,System.DateTime,DHI.Mike1D.Generic.IDiagnostics)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary.PrepareComponents(System.DateTime,System.DateTime,DHI.Mike1D.Generic.IDiagnostics,System.Collections.Generic.IList{DHI.Mike1D.BoundaryModule.BoundarySourceComponent})">
            <summary>
            Prepare AD components. Called as part of <see cref="M:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary.Prepare(System.DateTime,System.DateTime,DHI.Mike1D.Generic.IDiagnostics)"/>.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.AbstractSourceBoundary.ValidateItems(DHI.Mike1D.Generic.IDiagnostics@,System.Boolean,System.Boolean)">
            <summary>
            Validate _iItems of BoundarySource
            </summary>
            <param name="diagnostics">IDiagnostics to put issues into</param>
            <param name="hasMainItem"></param>
            <param name="mustHaveItems">Flag indicating if items must be present </param>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.SoftstartTypes">
            <summary>
            Types of softstart
            </summary>
            <remarks>
            Do not change integer values, they are used in conversions
            </remarks>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.SoftstartTypes.None">
            <summary>
            No softstart
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.SoftstartTypes.Linear">
            <summary>
            Linear variation within softstart period
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.SoftstartTypes.Sinusoidal">
            <summary>
            Sinusoidal variation within softstart period
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.AbstractBoundaryItem">
            <summary>
            Many common tasks for an <see cref="T:DHI.Mike1D.BoundaryModule.IBoundaryItem"/> are handled by the <see cref="T:DHI.Mike1D.BoundaryModule.AbstractBoundaryItem"/>. 
            It handles:
            <list type="bullet">
            <item>Application interval, <see cref="P:DHI.Mike1D.BoundaryModule.AbstractBoundaryItem.UseApplicationInterval"/></item>
            <item>Soft start properties</item>
            <item>Scaling factor</item>
            </list>
            It is up to the class that extends the AbstractBoundaryItem to make sure to utilize above 
            functionality in the GetValue call as described below. There are some helper functions in 
            this class for example to get the soft start factor for a given date/time.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.AbstractBoundaryItem.ScaleFactor">
            <inheritdoc />
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.AbstractBoundaryItem._scaleFactor">
            <summary> See <see cref="P:DHI.Mike1D.BoundaryModule.IAdvancedBoundaryItem.ScaleFactor"/> </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.AbstractBoundaryItem.EumQuantity">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.AbstractBoundaryItem.GetValue(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.AbstractBoundaryItem.GetAccumulatedValue(System.DateTime,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.AbstractBoundaryItem.IsDryWeatherFlow">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.AbstractBoundaryItem.Validate">
            <summary>
            Validate this
            </summary>
            <returns>IDiagnostics with issues</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.AbstractBoundaryItem.Prepare(System.DateTime,System.DateTime,DHI.Mike1D.Generic.IDiagnostics)">
            <inheritdoc/>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.AbstractBoundaryItem.GetNextTransitionTime(System.DateTime)">
            <summary>
            Default implementation of <see cref="M:DHI.Mike1D.BoundaryModule.IBoundaryItem.GetNextTransitionTime(System.DateTime)"/>
            returning the incoming datetime as the next transition time
            </summary>
            <param name="date"></param>
            <returns>Time of the next value different from that of the current date</returns>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.AbstractBoundaryItem.SoftstartType">
            <inheritdoc/>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.AbstractBoundaryItem._softstartType">
            <summary> See <see cref="P:DHI.Mike1D.BoundaryModule.IAdvancedBoundaryItem.SoftstartType"/> </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.AbstractBoundaryItem.SoftstartValue">
            <inheritdoc/>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.AbstractBoundaryItem._softstartValue">
            <summary> See <see cref="P:DHI.Mike1D.BoundaryModule.IAdvancedBoundaryItem.SoftstartValue"/> </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.AbstractBoundaryItem.SoftstartDuration">
            <inheritdoc/>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.AbstractBoundaryItem._softstartDuration">
            <summary> See <see cref="P:DHI.Mike1D.BoundaryModule.IAdvancedBoundaryItem.SoftstartDuration"/> </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.AbstractBoundaryItem.SoftstartFactor(System.DateTime)">
            <summary>
            Calculate the strength factor of the softstart. 
            Uses _applicationBegin as the startup
            
            Usage: 
               a = SoftStartFactor(t);
               Value = (1-a)*_softstartValue + (a)*Value;
            </summary>
            <param name="s">DateTime to get softstart factor for</param>
            <returns>A number between 0 and 1</returns>
            <remarks>
            If the input argument dateTime is before _applicationBegin, zero is returned.
            </remarks>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.AbstractBoundaryItem.SoftstartAccumulatedWeighting(System.Double,System.DateTime,System.DateTime)">
            <summary>
            Weights the <paramref name="accumulatedValue"/> with the hot-start value.
            </summary>
            <param name="accumulatedValue">Accumulated value (without hotstart), usually from <see cref="M:DHI.Mike1D.BoundaryModule.AbstractBoundaryItem.GetAccumulatedValue(System.DateTime,System.DateTime)"/> in the specified period</param>
            <param name="start">Start of accumulation period</param>
            <param name="end">End of accumulation period</param>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.AbstractBoundaryItem.UseApplicationInterval">
            <inheritdoc/>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.AbstractBoundaryItem._useApplicationInterval">
            <summary> See <see cref="P:DHI.Mike1D.BoundaryModule.IAdvancedBoundaryItem.UseApplicationInterval"/> </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.AbstractBoundaryItem.ApplicationBegin">
            <inheritdoc/>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.AbstractBoundaryItem._applicationBegin">
            <summary> See <see cref="P:DHI.Mike1D.BoundaryModule.IAdvancedBoundaryItem.ApplicationBegin"/> </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.AbstractBoundaryItem.ApplicationEnd">
            <inheritdoc/>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.AbstractBoundaryItem._applicationEnd">
            <summary> See <see cref="P:DHI.Mike1D.BoundaryModule.IAdvancedBoundaryItem.ApplicationEnd"/> </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.AbstractBoundaryItem.IsApplicable(System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.AbstractBoundaryItem.IsApplicable(System.DateTime,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.DistributedSourceBoundary">
            <summary>
            A distributed source is a source that is applied on a part of the network.
            It can be a combination of LocationSpans and Links.
            
            TODO: Check whether the links are necessary or whether they are just
            a simpel version of a LocationSpan.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.DistributedSourceBoundary.BoundarySourceType">
            <summary>
            Boundary source type, always DistributedSource
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.DistributedSourceBoundary.DistributedSourceType">
            <summary>
            Type of DistributedSource
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.DistributedSourceBoundary._distributionType">
            <summary>
            How the value of the source is distributed along the location spans/links
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.DistributedSourceBoundary.DistributionType">
            <summary>
            How the value of the source is distributed along the location spans/links
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.DistributedSourceBoundary.LocationSpans">
            <summary>
            A list of all LocationSpans
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.DistributedSourceBoundary.LinkIds">
            <summary>
            A list of all LinkIds
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.DistributedSourceBoundary.SetScaleFactor(DHI.Mike1D.Generic.ILocationSpan,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.DistributedSourceBoundary.SetScaleFactor(System.String,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.DistributedSourceBoundary.GetScaleFactor(DHI.Mike1D.Generic.ILocationSpan)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.DistributedSourceBoundary.GetScaleFactor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.DistributedSourceBoundary.GetValue(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.DistributedSourceBoundary.GetAccumulatedValue(System.DateTime,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.DistributedSourceBoundary.Validate(System.DateTime,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.DistributedSourceBoundary.ToString">
            <inheritdoc />
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.DistributedSourceBoundary.ExtensionData">
            <summary>
            Data from an extended DataContract not recognized here
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.DistributedSourceBoundary.CatchmentArea">
            <summary>
            Area of the connected catchment. For distributed boundaries of type RainfallRunoffInflow we 
            need the area of the connected catchment. Zero and unused for all other types of distributed boundaries
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.OpenSourceBoundaries">
            <summary>
            Class implementing a list of IOpenSourceBoundary's
            Required for generic list COM interop
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.OpenSourceBoundaries.#ctor">
            <summary>
            Initializes a new instance of the List class that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.OpenSourceBoundaries.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the List class that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of elements that the new list can initially store.</param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.OpenSourceBoundaries.#ctor(System.Collections.Generic.IEnumerable{DHI.Mike1D.BoundaryModule.IOpenSourceBoundary})">
            <summary>
            Initializes a new instance of the List class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.PointSourceBoundaries">
            <summary>
            Class implementing a list of IPointSourceBoundary's
            Required for generic list COM interop
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PointSourceBoundaries.#ctor">
            <summary>
            Initializes a new instance of the List class that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PointSourceBoundaries.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the List class that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of elements that the new list can initially store.</param>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PointSourceBoundaries.#ctor(System.Collections.Generic.IEnumerable{DHI.Mike1D.BoundaryModule.IPointSourceBoundary})">
            <summary>
            Initializes a new instance of the List class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.
            </summary>
            <param name="collection">The collection whose elements are copied to the new list.</param>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.PointSourceBoundaryTypes">
            <summary>
            Type of inflow.  Used to limit the total inflow of a specific type.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.PointSourceBoundaryTypes.Inflow">
            <summary>
            Normal inflow
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.PointSourceBoundaryTypes.SedimentInflow">
            <summary>
            Sediment inflow
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.PointSourceBoundaryInflowTypes">
            <summary>
            Type of inflow.  Used to limit the total inflow of a specific type.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.PointSourceBoundaryInflowTypes.NoSpecificType">
            <summary>
            Normal inflow
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.PointSourceBoundaryInflowTypes.RainfallRunoff">
            <summary>
            Rainfall runoff
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.PointSourceBoundaryInflowTypes.NodeInfiltration">
            <summary>
            Node infiltration (MU type inflow where the input is multiplied by the max node area 
            below current water level
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.PointSourceBoundaryInflowTypes.NodeExfiltration">
            <summary>
            Exfiltration from node. It is infiltration with an opposite sign.
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.PointSourceBoundary">
            <summary>
            A source located at a specific point in the network.
            A PointSourceBoundary is always an inflow (a forcing).
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PointSourceBoundary.BoundarySourceType">
            <summary>
            Type of BoundarySource - always PointSource
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PointSourceBoundary.PointSourceType">
            <summary>
            Type of Point source boundary. Default is <see cref="F:DHI.Mike1D.BoundaryModule.PointSourceBoundaryTypes.Inflow"/>
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PointSourceBoundary.PointSourceBoundaryInflowType">
            <summary>
            Type of PointSourceBoundary. Used to limit the total inflow of a specific type.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PointSourceBoundary.GetValue(System.DateTime)">
            <summary>
            Get value for this source
            </summary>
            <param name="date">DateTime to get value</param>
            <returns>Value</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PointSourceBoundary.GetPreferredTimeStep(System.DateTime,System.TimeSpan,System.TimeSpan,System.Double,System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PointSourceBoundary.GetValueWithoutDWF(System.DateTime)">
            <summary>
            Get value for this source
            </summary>
            <param name="date">DateTime to get value</param>
            <returns>Value</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PointSourceBoundary.GetAccumulatedValue(System.DateTime,System.DateTime)">
            <summary>
            Get value for this source
            </summary>
            <param name="start">Start dateTime to get value</param>
            <param name="end">End dateTime to get value</param>
            <returns>Value</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PointSourceBoundary.Validate(System.DateTime,System.DateTime)">
            <summary>
            Validate whether this source is correctly setup
            </summary>
            <returns>IDiagnostics with issues from this component only</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PointSourceBoundary.Description">
            <summary>
            Create a description of boundary, return as diagnostics item. Used as description when creating new diagnostics.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.PointSourceBoundary.ToString">
            <summary>
            Custom textual representation
            </summary>
            <returns>Custom textual representation</returns>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.PointSourceBoundary.ExtensionData">
            <summary>
            Data from an extended DataContract not recognized here
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.OpenSourceBoundaryTypes">
            <summary>
            Types of opensource boundaries
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.OpenSourceBoundaryTypes.Closed">
            <summary>
            Closed boundary, Wall boundary, zero flux
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.OpenSourceBoundaryTypes.Inflow">
            <summary>
            Inflow, flux
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.OpenSourceBoundaryTypes.QH">
            <summary>
            QH - flux-water level relation
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.OpenSourceBoundaryTypes.WaterLevel">
            <summary>
            Water level
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.OpenSourceBoundaryTypes.Outlet">
            <summary>
            Free outflow boundary condition
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.OpenSourceBoundaryTypes.SedimentSupply">
            <summary>
            Sediment supply (todo: sediment discharge?)
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.OpenSourceBoundaryTypes.SedimentTransport">
            <summary>
            Sediment transport
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.OpenSourceBoundaryTypes.BottomLevel">
            <summary>
            Bottom level. Used in ST simulations, specifying the bottom level and calculating sediment inflow based on this change.
            </summary>
        </member>
        <member name="F:DHI.Mike1D.BoundaryModule.OpenSourceBoundaryTypes.BottomLevelChange">
            <summary>
            Bottom level change. Used in ST simulations, specifying the change in bottom level.
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.OpenSourceBoundary">
            <summary>
            An open source boundary is at the boundary of the network,
            (compared to a point source boundary which can be situated
            anywhere in the network)
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.OpenSourceBoundary.BoundarySourceType">
            <summary>
            Type of boundary - always OpenSource
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.OpenSourceBoundary.OpenSourceBoundaryType">
            <summary>
            Type of this OpenSourceBoundary
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.OpenSourceBoundary.FlushFromBoundary">
            <inheritdoc />
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.OpenSourceBoundary.UseMixing">
            <summary>
            If true, then the AD module uses mixing when calculating boundary concentration in case of flow reversal at the boundary.
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.OpenSourceBoundary.MixHalvingTime">
            <summary>
            MixHalvingTime is time constant used to calculate boundary concentration mixing in 
            case of flow reversal at the boundary,
            <para>
            It specifies the the time it takes to half the influence of a previous outflow.
            </para>
            <para>
            A value of zero is undefined, and will disable mixing.
            </para>
            <para>
            Default value: 3600.
            Unit: [s]
            </para>
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.OpenSourceBoundary.GetValue(System.DateTime)">
            <summary>
            Get value for this source
            </summary>
            <param name="date">DateTime to get value</param>
            <returns>Value</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.OpenSourceBoundary.GetAccumulatedValue(System.DateTime,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.OpenSourceBoundary.Validate(System.DateTime,System.DateTime)">
            <summary>
            Validate this
            </summary>
            <returns>IDiagnostics with issues</returns>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.OpenSourceBoundary.Description">
            <summary>
            Create a description of boundary, return as diagnostics item. Used as description when creating new diagnostics.
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.OpenSourceBoundary.ToString">
            <inheritdoc />
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.OpenSourceBoundary.ExtensionData">
            <summary>
            Data from an extended DataContract not recognized here
            </summary>
        </member>
        <member name="T:DHI.Mike1D.BoundaryModule.QhRelation">
            <summary>
            QH relation
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.QhRelation.ID">
            <summary>
            Textual description of QH relation
            </summary>
        </member>
        <member name="P:DHI.Mike1D.BoundaryModule.QhRelation.QhTable">
            <summary>
            List of (Q, h)´s 
            </summary>
        </member>
        <member name="M:DHI.Mike1D.BoundaryModule.QhRelation.#ctor(System.Int32)">
            <summary>
            Create QH table with specified table size
            </summary>
        </member>
    </members>
</doc>
